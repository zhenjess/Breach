!function(t){var n={};function e(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(i,r,function(n){return t[n]}.bind(null,r));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var i=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},r=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,i,r){for(null==i&&(i=0),null==r&&(r=n.length);i<r;){var a=i+r>>>1;t(n[a],e)<0?i=a+1:r=a}return i},right:function(n,e,i,r){for(null==i&&(i=0),null==r&&(r=n.length);i<r;){var a=i+r>>>1;t(n[a],e)>0?r=a:i=a+1}return i}}};var a=r(i),o=a.right,u=(a.left,o);var s=Array.prototype,c=(s.slice,s.map,Math.sqrt(50)),f=Math.sqrt(10),h=Math.sqrt(2),l=function(t,n,e){var i,r,a,o,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((i=n<t)&&(r=t,t=n,n=r),0===(o=_(t,n,e))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),n=Math.floor(n/o),a=new Array(r=Math.ceil(n-t+1));++u<r;)a[u]=(t+u)*o;else for(t=Math.floor(t*o),n=Math.ceil(n*o),a=new Array(r=Math.ceil(t-n+1));++u<r;)a[u]=(t-u)/o;return i&&a.reverse(),a};function _(t,n,e){var i=(n-t)/Math.max(0,e),r=Math.floor(Math.log(i)/Math.LN10),a=i/Math.pow(10,r);return r>=0?(a>=c?10:a>=f?5:a>=h?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(a>=c?10:a>=f?5:a>=h?2:1)}function d(t,n,e){var i=Math.abs(n-t)/Math.max(0,e),r=Math.pow(10,Math.floor(Math.log(i)/Math.LN10)),a=i/r;return a>=c?r*=10:a>=f?r*=5:a>=h&&(r*=2),n<t?-r:r}var p=function(t,n){var e,i,r=t.length,a=-1;if(null==n){for(;++a<r;)if(null!=(e=t[a])&&e>=e)for(i=e;++a<r;)null!=(e=t[a])&&e>i&&(i=e)}else for(;++a<r;)if(null!=(e=n(t[a],a,t))&&e>=e)for(i=e;++a<r;)null!=(e=n(t[a],a,t))&&e>i&&(i=e);return i},y=function(t){for(var n,e,i,r=t.length,a=-1,o=0;++a<r;)o+=t[a].length;for(e=new Array(o);--r>=0;)for(n=(i=t[r]).length;--n>=0;)e[--o]=i[n];return e};Array.prototype.slice;var v={value:function(){}};function g(){for(var t,n=0,e=arguments.length,i={};n<e;++n){if(!(t=arguments[n]+"")||t in i)throw new Error("illegal type: "+t);i[t]=[]}return new x(i)}function x(t){this._=t}function b(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",i=t.indexOf(".");if(i>=0&&(e=t.slice(i+1),t=t.slice(0,i)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function w(t,n){for(var e,i=0,r=t.length;i<r;++i)if((e=t[i]).name===n)return e.value}function m(t,n,e){for(var i=0,r=t.length;i<r;++i)if(t[i].name===n){t[i]=v,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=e&&t.push({name:n,value:e}),t}x.prototype=g.prototype={constructor:x,on:function(t,n){var e,i=this._,r=b(t+"",i),a=-1,o=r.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<o;)if(e=(t=r[a]).type)i[e]=m(i[e],t.name,n);else if(null==n)for(e in i)i[e]=m(i[e],t.name,null);return this}for(;++a<o;)if((e=(t=r[a]).type)&&(e=w(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new x(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,i,r=new Array(e),a=0;a<e;++a)r[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,e=(i=this._[t]).length;a<e;++a)i[a].value.apply(n,r)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,a=i.length;r<a;++r)i[r].value.apply(n,e)}};var M=g,N="http://www.w3.org/1999/xhtml",T={svg:"http://www.w3.org/2000/svg",xhtml:N,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},k=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),T.hasOwnProperty(n)?{space:T[n],local:t}:t};function A(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===N&&n.documentElement.namespaceURI===N?n.createElement(t):n.createElementNS(e,t)}}function C(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var S=function(t){var n=k(t);return(n.local?C:A)(n)};function E(){}var U=function(t){return null==t?E:function(){return this.querySelector(t)}};function L(){return[]}var P=function(t){return null==t?L:function(){return this.querySelectorAll(t)}},D=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var R=document.documentElement;if(!R.matches){var q=R.webkitMatchesSelector||R.msMatchesSelector||R.mozMatchesSelector||R.oMatchesSelector;D=function(t){return function(){return q.call(this,t)}}}}var Y=D,F=function(t){return new Array(t.length)};function z(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}z.prototype={constructor:z,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var H="$";function O(t,n,e,i,r,a){for(var o,u=0,s=n.length,c=a.length;u<c;++u)(o=n[u])?(o.__data__=a[u],i[u]=o):e[u]=new z(t,a[u]);for(;u<s;++u)(o=n[u])&&(r[u]=o)}function j(t,n,e,i,r,a,o){var u,s,c,f={},h=n.length,l=a.length,_=new Array(h);for(u=0;u<h;++u)(s=n[u])&&(_[u]=c=H+o.call(s,s.__data__,u,n),c in f?r[u]=s:f[c]=s);for(u=0;u<l;++u)(s=f[c=H+o.call(t,a[u],u,a)])?(i[u]=s,s.__data__=a[u],f[c]=null):e[u]=new z(t,a[u]);for(u=0;u<h;++u)(s=n[u])&&f[_[u]]===s&&(r[u]=s)}function X(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function I(t){return function(){this.removeAttribute(t)}}function $(t){return function(){this.removeAttributeNS(t.space,t.local)}}function V(t,n){return function(){this.setAttribute(t,n)}}function Z(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function B(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function W(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var Q=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function J(t){return function(){this.style.removeProperty(t)}}function G(t,n,e){return function(){this.style.setProperty(t,n,e)}}function K(t,n,e){return function(){var i=n.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,e)}}function tt(t,n){return t.style.getPropertyValue(n)||Q(t).getComputedStyle(t,null).getPropertyValue(n)}function nt(t){return function(){delete this[t]}}function et(t,n){return function(){this[t]=n}}function it(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function rt(t){return t.trim().split(/^|\s+/)}function at(t){return t.classList||new ot(t)}function ot(t){this._node=t,this._names=rt(t.getAttribute("class")||"")}function ut(t,n){for(var e=at(t),i=-1,r=n.length;++i<r;)e.add(n[i])}function st(t,n){for(var e=at(t),i=-1,r=n.length;++i<r;)e.remove(n[i])}function ct(t){return function(){ut(this,t)}}function ft(t){return function(){st(this,t)}}function ht(t,n){return function(){(n.apply(this,arguments)?ut:st)(this,t)}}ot.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function lt(){this.textContent=""}function _t(t){return function(){this.textContent=t}}function dt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function pt(){this.innerHTML=""}function yt(t){return function(){this.innerHTML=t}}function vt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function gt(){this.nextSibling&&this.parentNode.appendChild(this)}function xt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function bt(){return null}function wt(){var t=this.parentNode;t&&t.removeChild(this)}function mt(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Mt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Nt={},Tt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Nt={mouseenter:"mouseover",mouseleave:"mouseout"}));function kt(t,n,e){return t=At(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function At(t,n,e){return function(i){var r=Tt;Tt=i;try{t.call(this,this.__data__,n,e)}finally{Tt=r}}}function Ct(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function St(t){return function(){var n=this.__on;if(n){for(var e,i=0,r=-1,a=n.length;i<a;++i)e=n[i],t.type&&e.type!==t.type||e.name!==t.name?n[++r]=e:this.removeEventListener(e.type,e.listener,e.capture);++r?n.length=r:delete this.__on}}}function Et(t,n,e){var i=Nt.hasOwnProperty(t.type)?kt:At;return function(r,a,o){var u,s=this.__on,c=i(n,a,o);if(s)for(var f=0,h=s.length;f<h;++f)if((u=s[f]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=c,u.capture=e),void(u.value=n);this.addEventListener(t.type,c,e),u={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(u):this.__on=[u]}}function Ut(t,n,e){var i=Q(t),r=i.CustomEvent;"function"==typeof r?r=new r(n,e):(r=i.document.createEvent("Event"),e?(r.initEvent(n,e.bubbles,e.cancelable),r.detail=e.detail):r.initEvent(n,!1,!1)),t.dispatchEvent(r)}function Lt(t,n){return function(){return Ut(this,t,n)}}function Pt(t,n){return function(){return Ut(this,t,n.apply(this,arguments))}}var Dt=[null];function Rt(t,n){this._groups=t,this._parents=n}function qt(){return new Rt([[document.documentElement]],Dt)}Rt.prototype=qt.prototype={constructor:Rt,select:function(t){"function"!=typeof t&&(t=U(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var a,o,u=n[r],s=u.length,c=i[r]=new Array(s),f=0;f<s;++f)(a=u[f])&&(o=t.call(a,a.__data__,f,u))&&("__data__"in a&&(o.__data__=a.__data__),c[f]=o);return new Rt(i,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=P(t));for(var n=this._groups,e=n.length,i=[],r=[],a=0;a<e;++a)for(var o,u=n[a],s=u.length,c=0;c<s;++c)(o=u[c])&&(i.push(t.call(o,o.__data__,c,u)),r.push(o));return new Rt(i,r)},filter:function(t){"function"!=typeof t&&(t=Y(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var a,o=n[r],u=o.length,s=i[r]=[],c=0;c<u;++c)(a=o[c])&&t.call(a,a.__data__,c,o)&&s.push(a);return new Rt(i,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),f=-1,this.each((function(t){d[++f]=t})),d;var e,i=n?j:O,r=this._parents,a=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var o=a.length,u=new Array(o),s=new Array(o),c=new Array(o),f=0;f<o;++f){var h=r[f],l=a[f],_=l.length,d=t.call(h,h&&h.__data__,f,r),p=d.length,y=s[f]=new Array(p),v=u[f]=new Array(p);i(h,l,y,v,c[f]=new Array(_),d,n);for(var g,x,b=0,w=0;b<p;++b)if(g=y[b]){for(b>=w&&(w=b+1);!(x=v[w])&&++w<p;);g._next=x||null}}return(u=new Rt(u,r))._enter=s,u._exit=c,u},enter:function(){return new Rt(this._enter||this._groups.map(F),this._parents)},exit:function(){return new Rt(this._exit||this._groups.map(F),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,i=n.length,r=e.length,a=Math.min(i,r),o=new Array(i),u=0;u<a;++u)for(var s,c=n[u],f=e[u],h=c.length,l=o[u]=new Array(h),_=0;_<h;++_)(s=c[_]||f[_])&&(l[_]=s);for(;u<i;++u)o[u]=n[u];return new Rt(o,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var i,r=t[n],a=r.length-1,o=r[a];--a>=0;)(i=r[a])&&(o&&o!==i.nextSibling&&o.parentNode.insertBefore(i,o),o=i);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=X);for(var e=this._groups,i=e.length,r=new Array(i),a=0;a<i;++a){for(var o,u=e[a],s=u.length,c=r[a]=new Array(s),f=0;f<s;++f)(o=u[f])&&(c[f]=o);c.sort(n)}return new Rt(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var i=t[n],r=0,a=i.length;r<a;++r){var o=i[r];if(o)return o}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,i=n.length;e<i;++e)for(var r,a=n[e],o=0,u=a.length;o<u;++o)(r=a[o])&&t.call(r,r.__data__,o,a);return this},attr:function(t,n){var e=k(t);if(arguments.length<2){var i=this.node();return e.local?i.getAttributeNS(e.space,e.local):i.getAttribute(e)}return this.each((null==n?e.local?$:I:"function"==typeof n?e.local?W:B:e.local?Z:V)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?J:"function"==typeof n?K:G)(t,n,null==e?"":e)):tt(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?nt:"function"==typeof n?it:et)(t,n)):this.node()[t]},classed:function(t,n){var e=rt(t+"");if(arguments.length<2){for(var i=at(this.node()),r=-1,a=e.length;++r<a;)if(!i.contains(e[r]))return!1;return!0}return this.each(("function"==typeof n?ht:n?ct:ft)(e,n))},text:function(t){return arguments.length?this.each(null==t?lt:("function"==typeof t?dt:_t)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?pt:("function"==typeof t?vt:yt)(t)):this.node().innerHTML},raise:function(){return this.each(gt)},lower:function(){return this.each(xt)},append:function(t){var n="function"==typeof t?t:S(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:S(t),i=null==n?bt:"function"==typeof n?n:U(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(wt)},clone:function(t){return this.select(t?Mt:mt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var i,r,a=Ct(t+""),o=a.length;if(!(arguments.length<2)){for(u=n?Et:St,null==e&&(e=!1),i=0;i<o;++i)this.each(u(a[i],n,e));return this}var u=this.node().__on;if(u)for(var s,c=0,f=u.length;c<f;++c)for(i=0,s=u[c];i<o;++i)if((r=a[i]).type===s.type&&r.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?Pt:Lt)(t,n))}};var Yt=qt,Ft=function(t){return"string"==typeof t?new Rt([[document.querySelector(t)]],[document.documentElement]):new Rt([[t]],Dt)},zt=0;function Ht(){this._="@"+(++zt).toString(36)}Ht.prototype=function(){return new Ht}.prototype={constructor:Ht,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function Ot(t,n,e,i,r,a,o,u,s,c){this.target=t,this.type=n,this.subject=e,this.identifier=i,this.active=r,this.x=a,this.y=o,this.dx=u,this.dy=s,this._=c}Ot.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var jt=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Xt(t,n){var e=Object.create(t.prototype);for(var i in n)e[i]=n[i];return e}function It(){}var $t="\\s*([+-]?\\d+)\\s*",Vt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Zt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Bt=/^#([0-9a-f]{3})$/,Wt=/^#([0-9a-f]{6})$/,Qt=new RegExp("^rgb\\("+[$t,$t,$t]+"\\)$"),Jt=new RegExp("^rgb\\("+[Zt,Zt,Zt]+"\\)$"),Gt=new RegExp("^rgba\\("+[$t,$t,$t,Vt]+"\\)$"),Kt=new RegExp("^rgba\\("+[Zt,Zt,Zt,Vt]+"\\)$"),tn=new RegExp("^hsl\\("+[Vt,Zt,Zt]+"\\)$"),nn=new RegExp("^hsla\\("+[Vt,Zt,Zt,Vt]+"\\)$"),en={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function rn(t){var n;return t=(t+"").trim().toLowerCase(),(n=Bt.exec(t))?new cn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=Wt.exec(t))?an(parseInt(n[1],16)):(n=Qt.exec(t))?new cn(n[1],n[2],n[3],1):(n=Jt.exec(t))?new cn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Gt.exec(t))?on(n[1],n[2],n[3],n[4]):(n=Kt.exec(t))?on(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=tn.exec(t))?fn(n[1],n[2]/100,n[3]/100,1):(n=nn.exec(t))?fn(n[1],n[2]/100,n[3]/100,n[4]):en.hasOwnProperty(t)?an(en[t]):"transparent"===t?new cn(NaN,NaN,NaN,0):null}function an(t){return new cn(t>>16&255,t>>8&255,255&t,1)}function on(t,n,e,i){return i<=0&&(t=n=e=NaN),new cn(t,n,e,i)}function un(t){return t instanceof It||(t=rn(t)),t?new cn((t=t.rgb()).r,t.g,t.b,t.opacity):new cn}function sn(t,n,e,i){return 1===arguments.length?un(t):new cn(t,n,e,null==i?1:i)}function cn(t,n,e,i){this.r=+t,this.g=+n,this.b=+e,this.opacity=+i}function fn(t,n,e,i){return i<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new ln(t,n,e,i)}function hn(t,n,e,i){return 1===arguments.length?function(t){if(t instanceof ln)return new ln(t.h,t.s,t.l,t.opacity);if(t instanceof It||(t=rn(t)),!t)return new ln;if(t instanceof ln)return t;var n=(t=t.rgb()).r/255,e=t.g/255,i=t.b/255,r=Math.min(n,e,i),a=Math.max(n,e,i),o=NaN,u=a-r,s=(a+r)/2;return u?(o=n===a?(e-i)/u+6*(e<i):e===a?(i-n)/u+2:(n-e)/u+4,u/=s<.5?a+r:2-a-r,o*=60):u=s>0&&s<1?0:o,new ln(o,u,s,t.opacity)}(t):new ln(t,n,e,null==i?1:i)}function ln(t,n,e,i){this.h=+t,this.s=+n,this.l=+e,this.opacity=+i}function _n(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}jt(It,rn,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),jt(cn,sn,Xt(It,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new cn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new cn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),jt(ln,hn,Xt(It,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ln(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ln(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,i=e+(e<.5?e:1-e)*n,r=2*e-i;return new cn(_n(t>=240?t-240:t+120,r,i),_n(t,r,i),_n(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var dn=Math.PI/180,pn=180/Math.PI,yn=.95047,vn=1,gn=1.08883,xn=4/29,bn=6/29,wn=3*bn*bn,mn=bn*bn*bn;function Mn(t){if(t instanceof Tn)return new Tn(t.l,t.a,t.b,t.opacity);if(t instanceof Un){var n=t.h*dn;return new Tn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof cn||(t=un(t));var e=Sn(t.r),i=Sn(t.g),r=Sn(t.b),a=kn((.4124564*e+.3575761*i+.1804375*r)/yn),o=kn((.2126729*e+.7151522*i+.072175*r)/vn);return new Tn(116*o-16,500*(a-o),200*(o-kn((.0193339*e+.119192*i+.9503041*r)/gn)),t.opacity)}function Nn(t,n,e,i){return 1===arguments.length?Mn(t):new Tn(t,n,e,null==i?1:i)}function Tn(t,n,e,i){this.l=+t,this.a=+n,this.b=+e,this.opacity=+i}function kn(t){return t>mn?Math.pow(t,1/3):t/wn+xn}function An(t){return t>bn?t*t*t:wn*(t-xn)}function Cn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Sn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function En(t,n,e,i){return 1===arguments.length?function(t){if(t instanceof Un)return new Un(t.h,t.c,t.l,t.opacity);t instanceof Tn||(t=Mn(t));var n=Math.atan2(t.b,t.a)*pn;return new Un(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new Un(t,n,e,null==i?1:i)}function Un(t,n,e,i){this.h=+t,this.c=+n,this.l=+e,this.opacity=+i}jt(Tn,Nn,Xt(It,{brighter:function(t){return new Tn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Tn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=vn*An(t),new cn(Cn(3.2404542*(n=yn*An(n))-1.5371385*t-.4985314*(e=gn*An(e))),Cn(-.969266*n+1.8760108*t+.041556*e),Cn(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),jt(Un,En,Xt(It,{brighter:function(t){return new Un(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Un(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Mn(this).rgb()}}));var Ln=-.29227,Pn=-.90649,Dn=1.97294,Rn=Dn*Pn,qn=1.78277*Dn,Yn=1.78277*Ln- -.14861*Pn;function Fn(t,n,e,i){return 1===arguments.length?function(t){if(t instanceof zn)return new zn(t.h,t.s,t.l,t.opacity);t instanceof cn||(t=un(t));var n=t.r/255,e=t.g/255,i=t.b/255,r=(Yn*i+Rn*n-qn*e)/(Yn+Rn-qn),a=i-r,o=(Dn*(e-r)-Ln*a)/Pn,u=Math.sqrt(o*o+a*a)/(Dn*r*(1-r)),s=u?Math.atan2(o,a)*pn-120:NaN;return new zn(s<0?s+360:s,u,r,t.opacity)}(t):new zn(t,n,e,null==i?1:i)}function zn(t,n,e,i){this.h=+t,this.s=+n,this.l=+e,this.opacity=+i}function Hn(t,n,e,i,r){var a=t*t,o=a*t;return((1-3*t+3*a-o)*n+(4-6*a+3*o)*e+(1+3*t+3*a-3*o)*i+o*r)/6}jt(zn,Fn,Xt(It,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new zn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new zn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*dn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),i=Math.cos(t),r=Math.sin(t);return new cn(255*(n+e*(-.14861*i+1.78277*r)),255*(n+e*(Ln*i+Pn*r)),255*(n+e*(Dn*i)),this.opacity)}}));var On=function(t){return function(){return t}};function jn(t,n){return function(e){return t+e*n}}function Xn(t,n){var e=n-t;return e?jn(t,e>180||e<-180?e-360*Math.round(e/360):e):On(isNaN(t)?n:t)}function In(t){return 1==(t=+t)?$n:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(i){return Math.pow(t+i*n,e)}}(n,e,t):On(isNaN(n)?e:n)}}function $n(t,n){var e=n-t;return e?jn(t,e):On(isNaN(t)?n:t)}var Vn=function t(n){var e=In(n);function i(t,n){var i=e((t=sn(t)).r,(n=sn(n)).r),r=e(t.g,n.g),a=e(t.b,n.b),o=$n(t.opacity,n.opacity);return function(n){return t.r=i(n),t.g=r(n),t.b=a(n),t.opacity=o(n),t+""}}return i.gamma=t,i}(1);function Zn(t){return function(n){var e,i,r=n.length,a=new Array(r),o=new Array(r),u=new Array(r);for(e=0;e<r;++e)i=sn(n[e]),a[e]=i.r||0,o[e]=i.g||0,u[e]=i.b||0;return a=t(a),o=t(o),u=t(u),i.opacity=1,function(t){return i.r=a(t),i.g=o(t),i.b=u(t),i+""}}}Zn((function(t){var n=t.length-1;return function(e){var i=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),r=t[i],a=t[i+1],o=i>0?t[i-1]:2*r-a,u=i<n-1?t[i+2]:2*a-r;return Hn((e-i/n)*n,o,r,a,u)}})),Zn((function(t){var n=t.length;return function(e){var i=Math.floor(((e%=1)<0?++e:e)*n),r=t[(i+n-1)%n],a=t[i%n],o=t[(i+1)%n],u=t[(i+2)%n];return Hn((e-i/n)*n,r,a,o,u)}}));var Bn=function(t,n){var e,i=n?n.length:0,r=t?Math.min(i,t.length):0,a=new Array(r),o=new Array(i);for(e=0;e<r;++e)a[e]=ae(t[e],n[e]);for(;e<i;++e)o[e]=n[e];return function(t){for(e=0;e<r;++e)o[e]=a[e](t);return o}},Wn=function(t,n){var e=new Date;return n-=t=+t,function(i){return e.setTime(t+n*i),e}},Qn=function(t,n){return n-=t=+t,function(e){return t+n*e}},Jn=function(t,n){var e,i={},r={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?i[e]=ae(t[e],n[e]):r[e]=n[e];return function(t){for(e in i)r[e]=i[e](t);return r}},Gn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Kn=new RegExp(Gn.source,"g");var te,ne,ee,ie,re=function(t,n){var e,i,r,a=Gn.lastIndex=Kn.lastIndex=0,o=-1,u=[],s=[];for(t+="",n+="";(e=Gn.exec(t))&&(i=Kn.exec(n));)(r=i.index)>a&&(r=n.slice(a,r),u[o]?u[o]+=r:u[++o]=r),(e=e[0])===(i=i[0])?u[o]?u[o]+=i:u[++o]=i:(u[++o]=null,s.push({i:o,x:Qn(e,i)})),a=Kn.lastIndex;return a<n.length&&(r=n.slice(a),u[o]?u[o]+=r:u[++o]=r),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,i=0;i<n;++i)u[(e=s[i]).i]=e.x(t);return u.join("")})},ae=function(t,n){var e,i=typeof n;return null==n||"boolean"===i?On(n):("number"===i?Qn:"string"===i?(e=rn(n))?(n=e,Vn):re:n instanceof rn?Vn:n instanceof Date?Wn:Array.isArray(n)?Bn:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Jn:Qn)(t,n)},oe=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},ue=180/Math.PI,se={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},ce=function(t,n,e,i,r,a){var o,u,s;return(o=Math.sqrt(t*t+n*n))&&(t/=o,n/=o),(s=t*e+n*i)&&(e-=t*s,i-=n*s),(u=Math.sqrt(e*e+i*i))&&(e/=u,i/=u,s/=u),t*i<n*e&&(t=-t,n=-n,s=-s,o=-o),{translateX:r,translateY:a,rotate:Math.atan2(n,t)*ue,skewX:Math.atan(s)*ue,scaleX:o,scaleY:u}};function fe(t,n,e,i){function r(t){return t.length?t.pop()+" ":""}return function(a,o){var u=[],s=[];return a=t(a),o=t(o),function(t,i,r,a,o,u){if(t!==r||i!==a){var s=o.push("translate(",null,n,null,e);u.push({i:s-4,x:Qn(t,r)},{i:s-2,x:Qn(i,a)})}else(r||a)&&o.push("translate("+r+n+a+e)}(a.translateX,a.translateY,o.translateX,o.translateY,u,s),function(t,n,e,a){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),a.push({i:e.push(r(e)+"rotate(",null,i)-2,x:Qn(t,n)})):n&&e.push(r(e)+"rotate("+n+i)}(a.rotate,o.rotate,u,s),function(t,n,e,a){t!==n?a.push({i:e.push(r(e)+"skewX(",null,i)-2,x:Qn(t,n)}):n&&e.push(r(e)+"skewX("+n+i)}(a.skewX,o.skewX,u,s),function(t,n,e,i,a,o){if(t!==e||n!==i){var u=a.push(r(a)+"scale(",null,",",null,")");o.push({i:u-4,x:Qn(t,e)},{i:u-2,x:Qn(n,i)})}else 1===e&&1===i||a.push(r(a)+"scale("+e+","+i+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,u,s),a=o=null,function(t){for(var n,e=-1,i=s.length;++e<i;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var he=fe((function(t){return"none"===t?se:(te||(te=document.createElement("DIV"),ne=document.documentElement,ee=document.defaultView),te.style.transform=t,t=ee.getComputedStyle(ne.appendChild(te),null).getPropertyValue("transform"),ne.removeChild(te),t=t.slice(7,-1).split(","),ce(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),le=fe((function(t){return null==t?se:(ie||(ie=document.createElementNS("http://www.w3.org/2000/svg","g")),ie.setAttribute("transform",t),(t=ie.transform.baseVal.consolidate())?(t=t.matrix,ce(t.a,t.b,t.c,t.d,t.e,t.f)):se)}),", ",")",")");Math.SQRT2;function _e(t){return function(n,e){var i=t((n=hn(n)).h,(e=hn(e)).h),r=$n(n.s,e.s),a=$n(n.l,e.l),o=$n(n.opacity,e.opacity);return function(t){return n.h=i(t),n.s=r(t),n.l=a(t),n.opacity=o(t),n+""}}}_e(Xn),_e($n);function de(t){return function(n,e){var i=t((n=En(n)).h,(e=En(e)).h),r=$n(n.c,e.c),a=$n(n.l,e.l),o=$n(n.opacity,e.opacity);return function(t){return n.h=i(t),n.c=r(t),n.l=a(t),n.opacity=o(t),n+""}}}de(Xn),de($n);function pe(t){return function n(e){function i(n,i){var r=t((n=Fn(n)).h,(i=Fn(i)).h),a=$n(n.s,i.s),o=$n(n.l,i.l),u=$n(n.opacity,i.opacity);return function(t){return n.h=r(t),n.s=a(t),n.l=o(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,i.gamma=n,i}(1)}pe(Xn);var ye,ve,ge=pe($n),xe=0,be=0,we=0,me=1e3,Me=0,Ne=0,Te=0,ke="object"==typeof performance&&performance.now?performance:Date,Ae="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ce(){return Ne||(Ae(Se),Ne=ke.now()+Te)}function Se(){Ne=0}function Ee(){this._call=this._time=this._next=null}function Ue(t,n,e){var i=new Ee;return i.restart(t,n,e),i}function Le(){Ne=(Me=ke.now())+Te,xe=be=0;try{!function(){Ce(),++xe;for(var t,n=ye;n;)(t=Ne-n._time)>=0&&n._call.call(null,t),n=n._next;--xe}()}finally{xe=0,function(){var t,n,e=ye,i=1/0;for(;e;)e._call?(i>e._time&&(i=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:ye=n);ve=t,De(i)}(),Ne=0}}function Pe(){var t=ke.now(),n=t-Me;n>me&&(Te-=n,Me=t)}function De(t){xe||(be&&(be=clearTimeout(be)),t-Ne>24?(t<1/0&&(be=setTimeout(Le,t-ke.now()-Te)),we&&(we=clearInterval(we))):(we||(Me=ke.now(),we=setInterval(Pe,me)),xe=1,Ae(Le)))}Ee.prototype=Ue.prototype={constructor:Ee,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Ce():+e)+(null==n?0:+n),this._next||ve===this||(ve?ve._next=this:ye=this,ve=this),this._call=t,this._time=e,De()},stop:function(){this._call&&(this._call=null,this._time=1/0,De())}};var Re=function(t,n,e){var i=new Ee;return n=null==n?0:+n,i.restart((function(e){i.stop(),t(e+n)}),n,e),i},qe=M("start","end","interrupt"),Ye=[],Fe=0,ze=1,He=2,Oe=3,je=4,Xe=5,Ie=6,$e=function(t,n,e,i,r,a){var o=t.__transition;if(o){if(e in o)return}else t.__transition={};!function(t,n,e){var i,r=t.__transition;function a(s){var c,f,h,l;if(e.state!==ze)return u();for(c in r)if((l=r[c]).name===e.name){if(l.state===Oe)return Re(a);l.state===je?(l.state=Ie,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete r[c]):+c<n&&(l.state=Ie,l.timer.stop(),delete r[c])}if(Re((function(){e.state===Oe&&(e.state=je,e.timer.restart(o,e.delay,e.time),o(s))})),e.state=He,e.on.call("start",t,t.__data__,e.index,e.group),e.state===He){for(e.state=Oe,i=new Array(h=e.tween.length),c=0,f=-1;c<h;++c)(l=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(i[++f]=l);i.length=f+1}}function o(n){for(var r=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=Xe,1),a=-1,o=i.length;++a<o;)i[a].call(null,r);e.state===Xe&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var i in e.state=Ie,e.timer.stop(),delete r[n],r)return;delete t.__transition}r[n]=e,e.timer=Ue((function(t){e.state=ze,e.timer.restart(a,e.delay,e.time),e.delay<=t&&a(t-e.delay)}),0,e.time)}(t,e,{name:n,index:i,group:r,on:qe,tween:Ye,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:Fe})};function Ve(t,n){var e=Be(t,n);if(e.state>Fe)throw new Error("too late; already scheduled");return e}function Ze(t,n){var e=Be(t,n);if(e.state>He)throw new Error("too late; already started");return e}function Be(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var We=function(t,n){var e,i,r,a=t.__transition,o=!0;if(a){for(r in n=null==n?null:n+"",a)(e=a[r]).name===n?(i=e.state>He&&e.state<Xe,e.state=Ie,e.timer.stop(),i&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete a[r]):o=!1;o&&delete t.__transition}};function Qe(t,n){var e,i;return function(){var r=Ze(this,t),a=r.tween;if(a!==e)for(var o=0,u=(i=e=a).length;o<u;++o)if(i[o].name===n){(i=i.slice()).splice(o,1);break}r.tween=i}}function Je(t,n,e){var i,r;if("function"!=typeof e)throw new Error;return function(){var a=Ze(this,t),o=a.tween;if(o!==i){r=(i=o).slice();for(var u={name:n,value:e},s=0,c=r.length;s<c;++s)if(r[s].name===n){r[s]=u;break}s===c&&r.push(u)}a.tween=r}}function Ge(t,n,e){var i=t._id;return t.each((function(){var t=Ze(this,i);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Be(t,i).value[n]}}var Ke=function(t,n){var e;return("number"==typeof n?Qn:n instanceof rn?Vn:(e=rn(n))?(n=e,Vn):re)(t,n)};function ti(t){return function(){this.removeAttribute(t)}}function ni(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ei(t,n,e){var i,r;return function(){var a=this.getAttribute(t);return a===e?null:a===i?r:r=n(i=a,e)}}function ii(t,n,e){var i,r;return function(){var a=this.getAttributeNS(t.space,t.local);return a===e?null:a===i?r:r=n(i=a,e)}}function ri(t,n,e){var i,r,a;return function(){var o,u=e(this);if(null!=u)return(o=this.getAttribute(t))===u?null:o===i&&u===r?a:a=n(i=o,r=u);this.removeAttribute(t)}}function ai(t,n,e){var i,r,a;return function(){var o,u=e(this);if(null!=u)return(o=this.getAttributeNS(t.space,t.local))===u?null:o===i&&u===r?a:a=n(i=o,r=u);this.removeAttributeNS(t.space,t.local)}}function oi(t,n){function e(){var e=this,i=n.apply(e,arguments);return i&&function(n){e.setAttributeNS(t.space,t.local,i(n))}}return e._value=n,e}function ui(t,n){function e(){var e=this,i=n.apply(e,arguments);return i&&function(n){e.setAttribute(t,i(n))}}return e._value=n,e}function si(t,n){return function(){Ve(this,t).delay=+n.apply(this,arguments)}}function ci(t,n){return n=+n,function(){Ve(this,t).delay=n}}function fi(t,n){return function(){Ze(this,t).duration=+n.apply(this,arguments)}}function hi(t,n){return n=+n,function(){Ze(this,t).duration=n}}function li(t,n){if("function"!=typeof n)throw new Error;return function(){Ze(this,t).ease=n}}function _i(t,n,e){var i,r,a=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Ve:Ze;return function(){var o=a(this,t),u=o.on;u!==i&&(r=(i=u).copy()).on(n,e),o.on=r}}var di=Yt.prototype.constructor;function pi(t,n,e){function i(){var i=this,r=n.apply(i,arguments);return r&&function(n){i.style.setProperty(t,r(n),e)}}return i._value=n,i}var yi=0;function vi(t,n,e,i){this._groups=t,this._parents=n,this._name=e,this._id=i}function gi(){return++yi}var xi=Yt.prototype;vi.prototype=function(t){return Yt().transition(t)}.prototype={constructor:vi,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=U(t));for(var i=this._groups,r=i.length,a=new Array(r),o=0;o<r;++o)for(var u,s,c=i[o],f=c.length,h=a[o]=new Array(f),l=0;l<f;++l)(u=c[l])&&(s=t.call(u,u.__data__,l,c))&&("__data__"in u&&(s.__data__=u.__data__),h[l]=s,$e(h[l],n,e,l,h,Be(u,e)));return new vi(a,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=P(t));for(var i=this._groups,r=i.length,a=[],o=[],u=0;u<r;++u)for(var s,c=i[u],f=c.length,h=0;h<f;++h)if(s=c[h]){for(var l,_=t.call(s,s.__data__,h,c),d=Be(s,e),p=0,y=_.length;p<y;++p)(l=_[p])&&$e(l,n,e,p,_,d);a.push(_),o.push(s)}return new vi(a,o,n,e)},filter:function(t){"function"!=typeof t&&(t=Y(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var a,o=n[r],u=o.length,s=i[r]=[],c=0;c<u;++c)(a=o[c])&&t.call(a,a.__data__,c,o)&&s.push(a);return new vi(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,i=n.length,r=e.length,a=Math.min(i,r),o=new Array(i),u=0;u<a;++u)for(var s,c=n[u],f=e[u],h=c.length,l=o[u]=new Array(h),_=0;_<h;++_)(s=c[_]||f[_])&&(l[_]=s);for(;u<i;++u)o[u]=n[u];return new vi(o,this._parents,this._name,this._id)},selection:function(){return new di(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=gi(),i=this._groups,r=i.length,a=0;a<r;++a)for(var o,u=i[a],s=u.length,c=0;c<s;++c)if(o=u[c]){var f=Be(o,n);$e(o,t,e,c,u,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new vi(i,this._parents,t,e)},call:xi.call,nodes:xi.nodes,node:xi.node,size:xi.size,empty:xi.empty,each:xi.each,on:function(t,n){var e=this._id;return arguments.length<2?Be(this.node(),e).on.on(t):this.each(_i(e,t,n))},attr:function(t,n){var e=k(t),i="transform"===e?le:Ke;return this.attrTween(t,"function"==typeof n?(e.local?ai:ri)(e,i,Ge(this,"attr."+t,n)):null==n?(e.local?ni:ti)(e):(e.local?ii:ei)(e,i,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var i=k(t);return this.tween(e,(i.local?oi:ui)(i,n))},style:function(t,n,e){var i="transform"==(t+="")?he:Ke;return null==n?this.styleTween(t,function(t,n){var e,i,r;return function(){var a=tt(this,t),o=(this.style.removeProperty(t),tt(this,t));return a===o?null:a===e&&o===i?r:r=n(e=a,i=o)}}(t,i)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var i,r,a;return function(){var o=tt(this,t),u=e(this);return null==u&&(this.style.removeProperty(t),u=tt(this,t)),o===u?null:o===i&&u===r?a:a=n(i=o,r=u)}}(t,i,Ge(this,"style."+t,n)):function(t,n,e){var i,r;return function(){var a=tt(this,t);return a===e?null:a===i?r:r=n(i=a,e)}}(t,i,n+""),e)},styleTween:function(t,n,e){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==n)return this.tween(i,null);if("function"!=typeof n)throw new Error;return this.tween(i,pi(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Ge(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var i,r=Be(this.node(),e).tween,a=0,o=r.length;a<o;++a)if((i=r[a]).name===t)return i.value;return null}return this.each((null==n?Qe:Je)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?si:ci)(n,t)):Be(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?fi:hi)(n,t)):Be(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(li(n,t)):Be(this.node(),n).ease}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var bi=2*Math.PI,wi=(function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=bi);function r(t){return n*Math.pow(2,10*--t)*Math.sin((i-t)/e)}return r.amplitude=function(n){return t(n,e*bi)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=bi);function r(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/e)}return r.amplitude=function(n){return t(n,e*bi)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=bi);function r(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((i-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((i+t)/e))/2}return r.amplitude=function(n){return t(n,e*bi)},r.period=function(e){return t(n,e)},r}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function mi(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return wi.time=Ce(),wi;return e}Yt.prototype.interrupt=function(t){return this.each((function(){We(this,t)}))},Yt.prototype.transition=function(t){var n,e;t instanceof vi?(n=t._id,t=t._name):(n=gi(),(e=wi).time=Ce(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,a=0;a<r;++a)for(var o,u=i[a],s=u.length,c=0;c<s;++c)(o=u[c])&&$e(o,t,n,c,u,e||mi(o,n));return new vi(i,this._parents,t,n)};["e","w"].map(Mi),["n","s"].map(Mi),["n","e","s","w","nw","ne","se","sw"].map(Mi);function Mi(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Ni=Math.PI,Ti=2*Ni,ki=Ti-1e-6;function Ai(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ci(){return new Ai}Ai.prototype=Ci.prototype={constructor:Ai,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,i){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+i)},bezierCurveTo:function(t,n,e,i,r,a){this._+="C"+ +t+","+ +n+","+ +e+","+ +i+","+(this._x1=+r)+","+(this._y1=+a)},arcTo:function(t,n,e,i,r){t=+t,n=+n,e=+e,i=+i,r=+r;var a=this._x1,o=this._y1,u=e-t,s=i-n,c=a-t,f=o-n,h=c*c+f*f;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(f*u-s*c)>1e-6&&r){var l=e-a,_=i-o,d=u*u+s*s,p=l*l+_*_,y=Math.sqrt(d),v=Math.sqrt(h),g=r*Math.tan((Ni-Math.acos((d+h-p)/(2*y*v)))/2),x=g/v,b=g/y;Math.abs(x-1)>1e-6&&(this._+="L"+(t+x*c)+","+(n+x*f)),this._+="A"+r+","+r+",0,0,"+ +(f*l>c*_)+","+(this._x1=t+b*u)+","+(this._y1=n+b*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,i,r,a){t=+t,n=+n;var o=(e=+e)*Math.cos(i),u=e*Math.sin(i),s=t+o,c=n+u,f=1^a,h=a?i-r:r-i;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),e&&(h<0&&(h=h%Ti+Ti),h>ki?this._+="A"+e+","+e+",0,1,"+f+","+(t-o)+","+(n-u)+"A"+e+","+e+",0,1,"+f+","+(this._x1=s)+","+(this._y1=c):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=Ni)+","+f+","+(this._x1=t+e*Math.cos(r))+","+(this._y1=n+e*Math.sin(r))))},rect:function(t,n,e,i){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +i+"h"+-e+"Z"},toString:function(){return this._}};function Si(){}function Ei(t,n){var e=new Si;if(t instanceof Si)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var i,r=-1,a=t.length;if(null==n)for(;++r<a;)e.set(r,t[r]);else for(;++r<a;)e.set(n(i=t[r],r,t),i)}else if(t)for(var o in t)e.set(o,t[o]);return e}Si.prototype=Ei.prototype={constructor:Si,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Ui=Ei;function Li(){}var Pi=Ui.prototype;function Di(t,n){var e=new Li;if(t instanceof Li)t.each((function(t){e.add(t)}));else if(t){var i=-1,r=t.length;if(null==n)for(;++i<r;)e.add(t[i]);else for(;++i<r;)e.add(n(t[i],i,t))}return e}Li.prototype=Di.prototype={constructor:Li,has:Pi.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Pi.remove,clear:Pi.clear,values:Pi.keys,size:Pi.size,empty:Pi.empty,each:Pi.each};var Ri=function(t){var n=[];for(var e in t)n.push(e);return n},qi={},Yi={},Fi=34,zi=10,Hi=13;function Oi(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}")}var ji=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function i(t,n){var i,r=[],a=t.length,o=0,u=0,s=a<=0,c=!1;function f(){if(s)return Yi;if(c)return c=!1,qi;var n,i,r=o;if(t.charCodeAt(r)===Fi){for(;o++<a&&t.charCodeAt(o)!==Fi||t.charCodeAt(++o)===Fi;);return(n=o)>=a?s=!0:(i=t.charCodeAt(o++))===zi?c=!0:i===Hi&&(c=!0,t.charCodeAt(o)===zi&&++o),t.slice(r+1,n-1).replace(/""/g,'"')}for(;o<a;){if((i=t.charCodeAt(n=o++))===zi)c=!0;else if(i===Hi)c=!0,t.charCodeAt(o)===zi&&++o;else if(i!==e)continue;return t.slice(r,n)}return s=!0,t.slice(r,a)}for(t.charCodeAt(a-1)===zi&&--a,t.charCodeAt(a-1)===Hi&&--a;(i=f())!==Yi;){for(var h=[];i!==qi&&i!==Yi;)h.push(i),i=f();n&&null==(h=n(h,u++))||r.push(h)}return r}function r(n){return n.map(a).join(t)}function a(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,a=i(t,(function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=Oi(t);return function(i,r){return n(e(i),r,t)}}(t,n):Oi(t)}));return a.columns=r||[],a},parseRows:i,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var i in t)i in n||e.push(n[i]=i)})),e}(n)),[e.map(a).join(t)].concat(n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))).join("\n")},formatRows:function(t){return t.map(r).join("\n")}}},Xi=ji(","),Ii=Xi.parse,$i=(Xi.parseRows,Xi.format,Xi.formatRows,ji("\t")),Vi=$i.parse,Zi=($i.parseRows,$i.format,$i.formatRows,function(t){return function(){return t}}),Bi=function(){return 1e-6*(Math.random()-.5)};function Wi(t,n,e,i){if(isNaN(n)||isNaN(e))return t;var r,a,o,u,s,c,f,h,l,_=t._root,d={data:i},p=t._x0,y=t._y0,v=t._x1,g=t._y1;if(!_)return t._root=d,t;for(;_.length;)if((c=n>=(a=(p+v)/2))?p=a:v=a,(f=e>=(o=(y+g)/2))?y=o:g=o,r=_,!(_=_[h=f<<1|c]))return r[h]=d,t;if(u=+t._x.call(null,_.data),s=+t._y.call(null,_.data),n===u&&e===s)return d.next=_,r?r[h]=d:t._root=d,t;do{r=r?r[h]=new Array(4):t._root=new Array(4),(c=n>=(a=(p+v)/2))?p=a:v=a,(f=e>=(o=(y+g)/2))?y=o:g=o}while((h=f<<1|c)==(l=(s>=o)<<1|u>=a));return r[l]=_,r[h]=d,t}var Qi=function(t,n,e,i,r){this.node=t,this.x0=n,this.y0=e,this.x1=i,this.y1=r};function Ji(t){return t[0]}function Gi(t){return t[1]}function Ki(t,n,e){var i=new tr(null==n?Ji:n,null==e?Gi:e,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function tr(t,n,e,i,r,a){this._x=t,this._y=n,this._x0=e,this._y0=i,this._x1=r,this._y1=a,this._root=void 0}function nr(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var er=Ki.prototype=tr.prototype;er.copy=function(){var t,n,e=new tr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return e;if(!i.length)return e._root=nr(i),e;for(t=[{source:i,target:e._root=new Array(4)}];i=t.pop();)for(var r=0;r<4;++r)(n=i.source[r])&&(n.length?t.push({source:n,target:i.target[r]=new Array(4)}):i.target[r]=nr(n));return e},er.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Wi(this.cover(n,e),n,e,t)},er.addAll=function(t){var n,e,i,r,a=t.length,o=new Array(a),u=new Array(a),s=1/0,c=1/0,f=-1/0,h=-1/0;for(e=0;e<a;++e)isNaN(i=+this._x.call(null,n=t[e]))||isNaN(r=+this._y.call(null,n))||(o[e]=i,u[e]=r,i<s&&(s=i),i>f&&(f=i),r<c&&(c=r),r>h&&(h=r));for(f<s&&(s=this._x0,f=this._x1),h<c&&(c=this._y0,h=this._y1),this.cover(s,c).cover(f,h),e=0;e<a;++e)Wi(this,o[e],u[e],t[e]);return this},er.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,i=this._y0,r=this._x1,a=this._y1;if(isNaN(e))r=(e=Math.floor(t))+1,a=(i=Math.floor(n))+1;else{if(!(e>t||t>r||i>n||n>a))return this;var o,u,s=r-e,c=this._root;switch(u=(n<(i+a)/2)<<1|t<(e+r)/2){case 0:do{(o=new Array(4))[u]=c,c=o}while(a=i+(s*=2),t>(r=e+s)||n>a);break;case 1:do{(o=new Array(4))[u]=c,c=o}while(a=i+(s*=2),(e=r-s)>t||n>a);break;case 2:do{(o=new Array(4))[u]=c,c=o}while(i=a-(s*=2),t>(r=e+s)||i>n);break;case 3:do{(o=new Array(4))[u]=c,c=o}while(i=a-(s*=2),(e=r-s)>t||i>n)}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=i,this._x1=r,this._y1=a,this},er.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},er.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},er.find=function(t,n,e){var i,r,a,o,u,s,c,f=this._x0,h=this._y0,l=this._x1,_=this._y1,d=[],p=this._root;for(p&&d.push(new Qi(p,f,h,l,_)),null==e?e=1/0:(f=t-e,h=n-e,l=t+e,_=n+e,e*=e);s=d.pop();)if(!(!(p=s.node)||(r=s.x0)>l||(a=s.y0)>_||(o=s.x1)<f||(u=s.y1)<h))if(p.length){var y=(r+o)/2,v=(a+u)/2;d.push(new Qi(p[3],y,v,o,u),new Qi(p[2],r,v,y,u),new Qi(p[1],y,a,o,v),new Qi(p[0],r,a,y,v)),(c=(n>=v)<<1|t>=y)&&(s=d[d.length-1],d[d.length-1]=d[d.length-1-c],d[d.length-1-c]=s)}else{var g=t-+this._x.call(null,p.data),x=n-+this._y.call(null,p.data),b=g*g+x*x;if(b<e){var w=Math.sqrt(e=b);f=t-w,h=n-w,l=t+w,_=n+w,i=p.data}}return i},er.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var n,e,i,r,a,o,u,s,c,f,h,l,_=this._root,d=this._x0,p=this._y0,y=this._x1,v=this._y1;if(!_)return this;if(_.length)for(;;){if((c=a>=(u=(d+y)/2))?d=u:y=u,(f=o>=(s=(p+v)/2))?p=s:v=s,n=_,!(_=_[h=f<<1|c]))return this;if(!_.length)break;(n[h+1&3]||n[h+2&3]||n[h+3&3])&&(e=n,l=h)}for(;_.data!==t;)if(i=_,!(_=_.next))return this;return(r=_.next)&&delete _.next,i?(r?i.next=r:delete i.next,this):n?(r?n[h]=r:delete n[h],(_=n[0]||n[1]||n[2]||n[3])&&_===(n[3]||n[2]||n[1]||n[0])&&!_.length&&(e?e[l]=_:this._root=_),this):(this._root=r,this)},er.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},er.root=function(){return this._root},er.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},er.visit=function(t){var n,e,i,r,a,o,u=[],s=this._root;for(s&&u.push(new Qi(s,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(s=n.node,i=n.x0,r=n.y0,a=n.x1,o=n.y1)&&s.length){var c=(i+a)/2,f=(r+o)/2;(e=s[3])&&u.push(new Qi(e,c,f,a,o)),(e=s[2])&&u.push(new Qi(e,i,f,c,o)),(e=s[1])&&u.push(new Qi(e,c,r,a,f)),(e=s[0])&&u.push(new Qi(e,i,r,c,f))}return this},er.visitAfter=function(t){var n,e=[],i=[];for(this._root&&e.push(new Qi(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var r=n.node;if(r.length){var a,o=n.x0,u=n.y0,s=n.x1,c=n.y1,f=(o+s)/2,h=(u+c)/2;(a=r[0])&&e.push(new Qi(a,o,u,f,h)),(a=r[1])&&e.push(new Qi(a,f,u,s,h)),(a=r[2])&&e.push(new Qi(a,o,h,f,c)),(a=r[3])&&e.push(new Qi(a,f,h,s,c))}i.push(n)}for(;n=i.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},er.x=function(t){return arguments.length?(this._x=t,this):this._x},er.y=function(t){return arguments.length?(this._y=t,this):this._y};function ir(t){return t.x}function rr(t){return t.y}var ar,or=10,ur=Math.PI*(3-Math.sqrt(5)),sr=function(t){var n,e=1,i=.001,r=1-Math.pow(i,1/300),a=0,o=.6,u=Ui(),s=Ue(f),c=M("tick","end");function f(){h(),c.call("tick",n),e<i&&(s.stop(),c.call("end",n))}function h(){var n,i,s=t.length;for(e+=(a-e)*r,u.each((function(t){t(e)})),n=0;n<s;++n)null==(i=t[n]).fx?i.x+=i.vx*=o:(i.x=i.fx,i.vx=0),null==i.fy?i.y+=i.vy*=o:(i.y=i.fy,i.vy=0)}function l(){for(var n,e=0,i=t.length;e<i;++e){if((n=t[e]).index=e,isNaN(n.x)||isNaN(n.y)){var r=or*Math.sqrt(e),a=e*ur;n.x=r*Math.cos(a),n.y=r*Math.sin(a)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function _(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),l(),n={tick:h,restart:function(){return s.restart(f),n},stop:function(){return s.stop(),n},nodes:function(e){return arguments.length?(t=e,l(),u.each(_),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(i=+t,n):i},alphaDecay:function(t){return arguments.length?(r=+t,n):+r},alphaTarget:function(t){return arguments.length?(a=+t,n):a},velocityDecay:function(t){return arguments.length?(o=1-t,n):1-o},force:function(t,e){return arguments.length>1?(null==e?u.remove(t):u.set(t,_(e)),n):u.get(t)},find:function(n,e,i){var r,a,o,u,s,c=0,f=t.length;for(null==i?i=1/0:i*=i,c=0;c<f;++c)(o=(r=n-(u=t[c]).x)*r+(a=e-u.y)*a)<i&&(s=u,i=o);return s},on:function(t,e){return arguments.length>1?(c.on(t,e),n):c.on(t)}}},cr=function(){var t,n,e,i,r=Zi(-30),a=1,o=1/0,u=.81;function s(i){var r,a=t.length,o=Ki(t,ir,rr).visitAfter(f);for(e=i,r=0;r<a;++r)n=t[r],o.visit(h)}function c(){if(t){var n,e,a=t.length;for(i=new Array(a),n=0;n<a;++n)e=t[n],i[e.index]=+r(e,n,t)}}function f(t){var n,e,r,a,o,u=0,s=0;if(t.length){for(r=a=o=0;o<4;++o)(n=t[o])&&(e=Math.abs(n.value))&&(u+=n.value,s+=e,r+=e*n.x,a+=e*n.y);t.x=r/s,t.y=a/s}else{(n=t).x=n.data.x,n.y=n.data.y;do{u+=i[n.data.index]}while(n=n.next)}t.value=u}function h(t,r,s,c){if(!t.value)return!0;var f=t.x-n.x,h=t.y-n.y,l=c-r,_=f*f+h*h;if(l*l/u<_)return _<o&&(0===f&&(_+=(f=Bi())*f),0===h&&(_+=(h=Bi())*h),_<a&&(_=Math.sqrt(a*_)),n.vx+=f*t.value*e/_,n.vy+=h*t.value*e/_),!0;if(!(t.length||_>=o)){(t.data!==n||t.next)&&(0===f&&(_+=(f=Bi())*f),0===h&&(_+=(h=Bi())*h),_<a&&(_=Math.sqrt(a*_)));do{t.data!==n&&(l=i[t.data.index]*e/_,n.vx+=f*l,n.vy+=h*l)}while(t=t.next)}}return s.initialize=function(n){t=n,c()},s.strength=function(t){return arguments.length?(r="function"==typeof t?t:Zi(+t),c(),s):r},s.distanceMin=function(t){return arguments.length?(a=t*t,s):Math.sqrt(a)},s.distanceMax=function(t){return arguments.length?(o=t*t,s):Math.sqrt(o)},s.theta=function(t){return arguments.length?(u=t*t,s):Math.sqrt(u)},s},fr=function(t){var n,e,i,r=Zi(.1);function a(t){for(var r,a=0,o=n.length;a<o;++a)(r=n[a]).vx+=(i[a]-r.x)*e[a]*t}function o(){if(n){var a,o=n.length;for(e=new Array(o),i=new Array(o),a=0;a<o;++a)e[a]=isNaN(i[a]=+t(n[a],a,n))?0:+r(n[a],a,n)}}return"function"!=typeof t&&(t=Zi(null==t?0:+t)),a.initialize=function(t){n=t,o()},a.strength=function(t){return arguments.length?(r="function"==typeof t?t:Zi(+t),o(),a):r},a.x=function(n){return arguments.length?(t="function"==typeof n?n:Zi(+n),o(),a):t},a},hr=function(t){var n,e,i,r=Zi(.1);function a(t){for(var r,a=0,o=n.length;a<o;++a)(r=n[a]).vy+=(i[a]-r.y)*e[a]*t}function o(){if(n){var a,o=n.length;for(e=new Array(o),i=new Array(o),a=0;a<o;++a)e[a]=isNaN(i[a]=+t(n[a],a,n))?0:+r(n[a],a,n)}}return"function"!=typeof t&&(t=Zi(null==t?0:+t)),a.initialize=function(t){n=t,o()},a.strength=function(t){return arguments.length?(r="function"==typeof t?t:Zi(+t),o(),a):r},a.y=function(n){return arguments.length?(t="function"==typeof n?n:Zi(+n),o(),a):t},a},lr=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,i=t.slice(0,e);return[i.length>1?i[0]+i.slice(2):i,+t.slice(e+1)]},_r=function(t){return(t=lr(Math.abs(t)))?t[1]:NaN},dr=function(t,n){var e=lr(t,n);if(!e)return t+"";var i=e[0],r=e[1];return r<0?"0."+new Array(-r).join("0")+i:i.length>r+1?i.slice(0,r+1)+"."+i.slice(r+1):i+new Array(r-i.length+2).join("0")},pr={"":function(t,n){t:for(var e,i=(t=t.toPrecision(n)).length,r=1,a=-1;r<i;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;case"e":break t;default:a>0&&(a=0)}return a>0?t.slice(0,a)+t.slice(e+1):t},"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return dr(100*t,n)},r:dr,s:function(t,n){var e=lr(t,n);if(!e)return t+"";var i=e[0],r=e[1],a=r-(ar=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,o=i.length;return a===o?i:a>o?i+new Array(a-o+1).join("0"):a>0?i.slice(0,a)+"."+i.slice(a):"0."+new Array(1-a).join("0")+lr(t,Math.max(0,n+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},yr=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function vr(t){return new gr(t)}function gr(t){if(!(n=yr.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",i=n[2]||">",r=n[3]||"-",a=n[4]||"",o=!!n[5],u=n[6]&&+n[6],s=!!n[7],c=n[8]&&+n[8].slice(1),f=n[9]||"";"n"===f?(s=!0,f="g"):pr[f]||(f=""),(o||"0"===e&&"="===i)&&(o=!0,e="0",i="="),this.fill=e,this.align=i,this.sign=r,this.symbol=a,this.zero=o,this.width=u,this.comma=s,this.precision=c,this.type=f}vr.prototype=gr.prototype,gr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var xr,br,wr,mr=function(t){return t},Mr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];xr=function(t){var n,e,i=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,i){for(var r=t.length,a=[],o=0,u=n[0],s=0;r>0&&u>0&&(s+u+1>i&&(u=Math.max(1,i-s)),a.push(t.substring(r-=u,r+u)),!((s+=u+1)>i));)u=n[o=(o+1)%n.length];return a.reverse().join(e)}):mr,r=t.currency,a=t.decimal,o=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(t.numerals):mr,u=t.percent||"%";function s(t){var n=(t=vr(t)).fill,e=t.align,s=t.sign,c=t.symbol,f=t.zero,h=t.width,l=t.comma,_=t.precision,d=t.type,p="$"===c?r[0]:"#"===c&&/[boxX]/.test(d)?"0"+d.toLowerCase():"",y="$"===c?r[1]:/[%p]/.test(d)?u:"",v=pr[d],g=!d||/[defgprs%]/.test(d);function x(t){var r,u,c,x=p,b=y;if("c"===d)b=v(t)+b,t="";else{var w=(t=+t)<0;if(t=v(Math.abs(t),_),w&&0==+t&&(w=!1),x=(w?"("===s?s:"-":"-"===s||"("===s?"":s)+x,b=("s"===d?Mr[8+ar/3]:"")+b+(w&&"("===s?")":""),g)for(r=-1,u=t.length;++r<u;)if(48>(c=t.charCodeAt(r))||c>57){b=(46===c?a+t.slice(r+1):t.slice(r))+b,t=t.slice(0,r);break}}l&&!f&&(t=i(t,1/0));var m=x.length+t.length+b.length,M=m<h?new Array(h-m+1).join(n):"";switch(l&&f&&(t=i(M+t,M.length?h-b.length:1/0),M=""),e){case"<":t=x+t+b+M;break;case"=":t=x+M+t+b;break;case"^":t=M.slice(0,m=M.length>>1)+x+t+b+M.slice(m);break;default:t=M+x+t+b}return o(t)}return _=null==_?d?6:12:/[gprs]/.test(d)?Math.max(1,Math.min(21,_)):Math.max(0,Math.min(20,_)),x.toString=function(){return t+""},x}return{format:s,formatPrefix:function(t,n){var e=s(((t=vr(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(_r(n)/3))),r=Math.pow(10,-i),a=Mr[8+i/3];return function(t){return e(r*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),br=xr.format,wr=xr.formatPrefix;var Nr=function(){return new Tr};function Tr(){this.reset()}Tr.prototype={constructor:Tr,reset:function(){this.s=this.t=0},add:function(t){Ar(kr,t,this.t),Ar(this,kr.s,this.s),this.s?this.t+=kr.t:this.s=kr.t},valueOf:function(){return this.s}};var kr=new Tr;function Ar(t,n,e){var i=t.s=n+e,r=i-n,a=i-r;t.t=n-a+(e-r)}var Cr=1e-6,Sr=Math.PI,Er=Sr/2,Ur=Sr/4,Lr=2*Sr,Pr=Sr/180,Dr=Math.abs,Rr=Math.atan,qr=Math.atan2,Yr=Math.cos,Fr=(Math.ceil,Math.exp),zr=(Math.floor,Math.log),Hr=(Math.pow,Math.sin),Or=(Math.sign,Math.sqrt),jr=Math.tan;function Xr(t){return t>1?0:t<-1?Sr:Math.acos(t)}function Ir(t){return t>1?Er:t<-1?-Er:Math.asin(t)}function $r(){}Nr(),Nr();function Vr(t){var n=t[0],e=t[1],i=Yr(e);return[i*Yr(n),i*Hr(n),Hr(e)]}function Zr(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Br(t){var n=Or(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}Nr();function Wr(t,n){return[t>Sr?t-Lr:t<-Sr?t+Lr:t,n]}Wr.invert=Wr;var Qr=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:$r,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},Jr=function(t,n){return Dr(t[0]-n[0])<Cr&&Dr(t[1]-n[1])<Cr};function Gr(t,n,e,i){this.x=t,this.z=n,this.o=e,this.e=i,this.v=!1,this.n=this.p=null}var Kr=function(t,n,e,i,r){var a,o,u=[],s=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,i=t[0],o=t[n];if(Jr(i,o)){for(r.lineStart(),a=0;a<n;++a)r.point((i=t[a])[0],i[1]);r.lineEnd()}else u.push(e=new Gr(i,t,null,!0)),s.push(e.o=new Gr(i,null,e,!1)),u.push(e=new Gr(o,t,null,!1)),s.push(e.o=new Gr(o,null,e,!0))}})),u.length){for(s.sort(n),ta(u),ta(s),a=0,o=s.length;a<o;++a)s[a].e=e=!e;for(var c,f,h=u[0];;){for(var l=h,_=!0;l.v;)if((l=l.n)===h)return;c=l.z,r.lineStart();do{if(l.v=l.o.v=!0,l.e){if(_)for(a=0,o=c.length;a<o;++a)r.point((f=c[a])[0],f[1]);else i(l.x,l.n.x,1,r);l=l.n}else{if(_)for(c=l.p.z,a=c.length-1;a>=0;--a)r.point((f=c[a])[0],f[1]);else i(l.x,l.p.x,-1,r);l=l.p}c=(l=l.o).z,_=!_}while(!l.v);r.lineEnd()}}};function ta(t){if(n=t.length){for(var n,e,i=0,r=t[0];++i<n;)r.n=e=t[i],e.p=r,r=e;r.n=e=t[0],e.p=r}}var na=Nr(),ea=function(t,n){var e=n[0],i=n[1],r=[Hr(e),-Yr(e),0],a=0,o=0;na.reset();for(var u=0,s=t.length;u<s;++u)if(f=(c=t[u]).length)for(var c,f,h=c[f-1],l=h[0],_=h[1]/2+Ur,d=Hr(_),p=Yr(_),y=0;y<f;++y,l=g,d=b,p=w,h=v){var v=c[y],g=v[0],x=v[1]/2+Ur,b=Hr(x),w=Yr(x),m=g-l,M=m>=0?1:-1,N=M*m,T=N>Sr,k=d*b;if(na.add(qr(k*M*Hr(N),p*w+k*Yr(N))),a+=T?m+M*Lr:m,T^l>=e^g>=e){var A=Zr(Vr(h),Vr(v));Br(A);var C=Zr(r,A);Br(C);var S=(T^m>=0?-1:1)*Ir(C[2]);(i>S||i===S&&(A[0]||A[1]))&&(o+=T^m>=0?1:-1)}}return(a<-Cr||a<Cr&&na<-Cr)^1&o},ia=function(t,n,e,i){return function(r){var a,o,u,s=n(r),c=Qr(),f=n(c),h=!1,l={point:_,lineStart:p,lineEnd:v,polygonStart:function(){l.point=g,l.lineStart=x,l.lineEnd=b,o=[],a=[]},polygonEnd:function(){l.point=_,l.lineStart=p,l.lineEnd=v,o=y(o);var t=ea(a,i);o.length?(h||(r.polygonStart(),h=!0),Kr(o,aa,t,e,r)):t&&(h||(r.polygonStart(),h=!0),r.lineStart(),e(null,null,1,r),r.lineEnd()),h&&(r.polygonEnd(),h=!1),o=a=null},sphere:function(){r.polygonStart(),r.lineStart(),e(null,null,1,r),r.lineEnd(),r.polygonEnd()}};function _(n,e){t(n,e)&&r.point(n,e)}function d(t,n){s.point(t,n)}function p(){l.point=d,s.lineStart()}function v(){l.point=_,s.lineEnd()}function g(t,n){u.push([t,n]),f.point(t,n)}function x(){f.lineStart(),u=[]}function b(){g(u[0][0],u[0][1]),f.lineEnd();var t,n,e,i,s=f.clean(),l=c.result(),_=l.length;if(u.pop(),a.push(u),u=null,_)if(1&s){if((n=(e=l[0]).length-1)>0){for(h||(r.polygonStart(),h=!0),r.lineStart(),t=0;t<n;++t)r.point((i=e[t])[0],i[1]);r.lineEnd()}}else _>1&&2&s&&l.push(l.pop().concat(l.shift())),o.push(l.filter(ra))}return l}};function ra(t){return t.length>1}function aa(t,n){return((t=t.x)[0]<0?t[1]-Er-Cr:Er-t[1])-((n=n.x)[0]<0?n[1]-Er-Cr:Er-n[1])}ia((function(){return!0}),(function(t){var n,e=NaN,i=NaN,r=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(a,o){var u=a>0?Sr:-Sr,s=Dr(a-e);Dr(s-Sr)<Cr?(t.point(e,i=(i+o)/2>0?Er:-Er),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(u,i),t.point(a,i),n=0):r!==u&&s>=Sr&&(Dr(e-r)<Cr&&(e-=r*Cr),Dr(a-u)<Cr&&(a-=u*Cr),i=function(t,n,e,i){var r,a,o=Hr(t-e);return Dr(o)>Cr?Rr((Hr(n)*(a=Yr(i))*Hr(e)-Hr(i)*(r=Yr(n))*Hr(t))/(r*a*o)):(n+i)/2}(e,i,a,o),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(u,i),n=0),t.point(e=a,i=o),r=u},lineEnd:function(){t.lineEnd(),e=i=NaN},clean:function(){return 2-n}}}),(function(t,n,e,i){var r;if(null==t)r=e*Er,i.point(-Sr,r),i.point(0,r),i.point(Sr,r),i.point(Sr,0),i.point(Sr,-r),i.point(0,-r),i.point(-Sr,-r),i.point(-Sr,0),i.point(-Sr,r);else if(Dr(t[0]-n[0])>Cr){var a=t[0]<n[0]?Sr:-Sr;r=e*a/2,i.point(-a,r),i.point(0,r),i.point(a,r)}else i.point(n[0],n[1])}),[-Sr,-Er]);Nr();Nr(),Nr();function oa(t){this._context=t}oa.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Lr)}},result:$r};Nr();function ua(){this._string=[]}function sa(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}ua.prototype={_radius:4.5,_circle:sa(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=sa(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function ca(t){return function(n){var e=new fa;for(var i in t)e[i]=t[i];return e.stream=n,e}}function fa(){}fa.prototype={constructor:fa,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};Yr(30*Pr);ca({point:function(t,n){this.stream.point(t*Pr,n*Pr)}});function ha(t){return function(n,e){var i=Yr(n),r=Yr(e),a=t(i*r);return[a*r*Hr(n),a*Hr(e)]}}function la(t){return function(n,e){var i=Or(n*n+e*e),r=t(i),a=Hr(r),o=Yr(r);return[qr(n*a,i*o),Ir(i&&e*a/i)]}}var _a=ha((function(t){return Or(2/(1+t))}));_a.invert=la((function(t){return 2*Ir(t/2)}));var da=ha((function(t){return(t=Xr(t))&&t/Hr(t)}));da.invert=la((function(t){return t}));function pa(t,n){return[t,zr(jr((Er+n)/2))]}pa.invert=function(t,n){return[t,2*Rr(Fr(n))-Er]};function ya(t,n){return[t,n]}ya.invert=ya;function va(t,n){var e=Yr(n),i=Yr(t)*e;return[e*Hr(t)/i,Hr(n)/i]}va.invert=la(Rr);function ga(t,n){var e=n*n,i=e*e;return[t*(.8707-.131979*e+i*(i*(.003971*e-.001529*i)-.013791)),n*(1.007226+e*(.015085+i*(.028874*e-.044475-.005916*i)))]}ga.invert=function(t,n){var e,i=n,r=25;do{var a=i*i,o=a*a;i-=e=(i*(1.007226+a*(.015085+o*(.028874*a-.044475-.005916*o)))-n)/(1.007226+a*(.045255+o*(.259866*a-.311325-.005916*11*o)))}while(Dr(e)>Cr&&--r>0);return[t/(.8707+(a=i*i)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),i]};function xa(t,n){return[Yr(n)*Hr(t),Hr(n)]}xa.invert=la(Ir);function ba(t,n){var e=Yr(n),i=1+Yr(t)*e;return[e*Hr(t)/i,Hr(n)/i]}ba.invert=la((function(t){return 2*Rr(t)}));function wa(t,n){return[zr(jr((Er+n)/2)),-t]}wa.invert=function(t,n){return[-n,2*Rr(Fr(t))-Er]};function ma(t){var n=0,e=t.children,i=e&&e.length;if(i)for(;--i>=0;)n+=e[i].value;else n=1;t.value=n}function Ma(t,n){var e,i,r,a,o,u=new Aa(t),s=+t.value&&(u.value=t.value),c=[u];for(null==n&&(n=Na);e=c.pop();)if(s&&(e.value=+e.data.value),(r=n(e.data))&&(o=r.length))for(e.children=new Array(o),a=o-1;a>=0;--a)c.push(i=e.children[a]=new Aa(r[a])),i.parent=e,i.depth=e.depth+1;return u.eachBefore(ka)}function Na(t){return t.children}function Ta(t){t.data=t.data.data}function ka(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Aa(t){this.data=t,this.depth=this.height=0,this.parent=null}Aa.prototype=Ma.prototype={constructor:Aa,count:function(){return this.eachAfter(ma)},each:function(t){var n,e,i,r,a=this,o=[a];do{for(n=o.reverse(),o=[];a=n.pop();)if(t(a),e=a.children)for(i=0,r=e.length;i<r;++i)o.push(e[i])}while(o.length);return this},eachAfter:function(t){for(var n,e,i,r=this,a=[r],o=[];r=a.pop();)if(o.push(r),n=r.children)for(e=0,i=n.length;e<i;++e)a.push(n[e]);for(;r=o.pop();)t(r);return this},eachBefore:function(t){for(var n,e,i=this,r=[i];i=r.pop();)if(t(i),n=i.children)for(e=n.length-1;e>=0;--e)r.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,i=n.children,r=i&&i.length;--r>=0;)e+=i[r].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),i=n.ancestors(),r=null;t=e.pop(),n=i.pop();for(;t===n;)r=t,t=e.pop(),n=i.pop();return r}(n,t),i=[n];n!==e;)n=n.parent,i.push(n);for(var r=i.length;t!==e;)i.splice(r,0,t),t=t.parent;return i},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return Ma(this).eachBefore(Ta)}};Array.prototype.slice;var Ca=function(t,n,e,i,r){for(var a,o=t.children,u=-1,s=o.length,c=t.value&&(i-n)/t.value;++u<s;)(a=o[u]).y0=e,a.y1=r,a.x0=n,a.x1=n+=a.value*c};function Sa(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}Sa.prototype=Object.create(Aa.prototype);var Ea=function(t,n,e,i,r){for(var a,o=t.children,u=-1,s=o.length,c=t.value&&(r-e)/t.value;++u<s;)(a=o[u]).x0=n,a.x1=i,a.y0=e,a.y1=e+=a.value*c},Ua=(1+Math.sqrt(5))/2;function La(t,n,e,i,r,a){for(var o,u,s,c,f,h,l,_,d,p,y,v=[],g=n.children,x=0,b=0,w=g.length,m=n.value;x<w;){s=r-e,c=a-i;do{f=g[b++].value}while(!f&&b<w);for(h=l=f,y=f*f*(p=Math.max(c/s,s/c)/(m*t)),d=Math.max(l/y,y/h);b<w;++b){if(f+=u=g[b].value,u<h&&(h=u),u>l&&(l=u),y=f*f*p,(_=Math.max(l/y,y/h))>d){f-=u;break}d=_}v.push(o={value:f,dice:s<c,children:g.slice(x,b)}),o.dice?Ca(o,e,i,r,m?i+=c*f/m:a):Ea(o,e,i,m?e+=s*f/m:r,a),m-=f,x=b}return v}(function t(n){function e(t,e,i,r,a){La(n,t,e,i,r,a)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(Ua),function t(n){function e(t,e,i,r,a){if((o=t._squarify)&&o.ratio===n)for(var o,u,s,c,f,h=-1,l=o.length,_=t.value;++h<l;){for(s=(u=o[h]).children,c=u.value=0,f=s.length;c<f;++c)u.value+=s[c].value;u.dice?Ca(u,e,i,r,i+=(a-i)*u.value/_):Ea(u,e,i,e+=(r-e)*u.value/_,a),_-=u.value}else t._squarify=o=La(n,t,e,i,r,a),o.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(Ua);var Pa=[].slice,Da={};function Ra(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function qa(t){if(!t._start)try{!function(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],i=e.length-1,r=e[i];e[i]=Ya(t,n),--t._waiting,++t._active,e=r.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||Da)}}(t)}catch(n){if(t._tasks[t._ended+t._active-1])Fa(t,n);else if(!t._data)throw n}}function Ya(t,n){return function(e,i){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?Fa(t,e):(t._data[n]=i,t._waiting?qa(t):za(t))))}}function Fa(t,n){var e,i=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--i>=0;)if((e=t._tasks[i])&&(t._tasks[i]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,za(t)}function za(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}Ra.prototype=function(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new Ra(t)}.prototype={constructor:Ra,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=Pa.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),qa(this),this},abort:function(){return null==this._error&&Fa(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},za(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,za(this),this}};var Ha=function(){return Math.random()},Oa=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Ha),function t(n){function e(t,e){var i,r;return t=null==t?0:+t,e=null==e?1:+e,function(){var a;if(null!=i)a=i,i=null;else do{i=2*n()-1,a=2*n()-1,r=i*i+a*a}while(!r||r>1);return t+e*a*Math.sqrt(-2*Math.log(r)/r)}}return e.source=t,e}(Ha)),ja=(function t(n){function e(){var t=Oa.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Ha),function t(n){function e(t){return function(){for(var e=0,i=0;i<t;++i)e+=n();return e}}return e.source=t,e}(Ha)),Xa=(function t(n){function e(t){var e=ja.source(n)(t);return function(){return e()/t}}return e.source=t,e}(Ha),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Ha),function(t,n){var e,i,r,a,o=M("beforesend","progress","load","error"),u=Ui(),s=new XMLHttpRequest,c=null,f=null,h=0;function l(t){var n,i=s.status;if(!i&&function(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}(s)||i>=200&&i<300||304===i){if(r)try{n=r.call(e,s)}catch(t){return void o.call("error",e,t)}else n=s;o.call("load",e,n)}else o.call("error",e,t)}if("undefined"==typeof XDomainRequest||"withCredentials"in s||!/^(http(s)?:)?\/\//.test(t)||(s=new XDomainRequest),"onload"in s?s.onload=s.onerror=s.ontimeout=l:s.onreadystatechange=function(t){s.readyState>3&&l(t)},s.onprogress=function(t){o.call("progress",e,t)},e={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?u.get(t):(null==n?u.remove(t):u.set(t,n+""),e)},mimeType:function(t){return arguments.length?(i=null==t?null:t+"",e):i},responseType:function(t){return arguments.length?(a=t,e):a},timeout:function(t){return arguments.length?(h=+t,e):h},user:function(t){return arguments.length<1?c:(c=null==t?null:t+"",e)},password:function(t){return arguments.length<1?f:(f=null==t?null:t+"",e)},response:function(t){return r=t,e},get:function(t,n){return e.send("GET",t,n)},post:function(t,n){return e.send("POST",t,n)},send:function(n,r,l){return s.open(n,t,!0,c,f),null==i||u.has("accept")||u.set("accept",i+",*/*"),s.setRequestHeader&&u.each((function(t,n){s.setRequestHeader(n,t)})),null!=i&&s.overrideMimeType&&s.overrideMimeType(i),null!=a&&(s.responseType=a),h>0&&(s.timeout=h),null==l&&"function"==typeof r&&(l=r,r=null),null!=l&&1===l.length&&(l=function(t){return function(n,e){t(null==n?e:null)}}(l)),null!=l&&e.on("error",l).on("load",(function(t){l(null,t)})),o.call("beforesend",e,s),s.send(null==r?null:r),e},abort:function(){return s.abort(),e},on:function(){var t=o.on.apply(o,arguments);return t===o?e:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return e.get(n)}return e});var Ia=function(t,n){return function(e,i){var r=Xa(e).mimeType(t).response(n);if(null!=i){if("function"!=typeof i)throw new Error("invalid callback: "+i);return r.get(i)}return r}},$a=(Ia("text/html",(function(t){return document.createRange().createContextualFragment(t.responseText)})),Ia("application/json",(function(t){return JSON.parse(t.responseText)})),Ia("text/plain",(function(t){return t.responseText})),Ia("application/xml",(function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n})),function(t,n){return function(e,i,r){arguments.length<3&&(r=i,i=null);var a=Xa(e).mimeType(t);return a.row=function(t){return arguments.length?a.response(Va(n,i=t)):i},a.row(i),r?a.get(r):a}});function Va(t,n){return function(e){return t(e.responseText,n)}}$a("text/csv",Ii),$a("text/tab-separated-values",Vi);var Za=Array.prototype,Ba=Za.map,Wa=Za.slice,Qa={name:"implicit"};function Ja(t){var n=Ui(),e=[],i=Qa;function r(r){var a=r+"",o=n.get(a);if(!o){if(i!==Qa)return i;n.set(a,o=e.push(r))}return t[(o-1)%t.length]}return t=null==t?[]:Wa.call(t),r.domain=function(t){if(!arguments.length)return e.slice();e=[],n=Ui();for(var i,a,o=-1,u=t.length;++o<u;)n.has(a=(i=t[o])+"")||n.set(a,e.push(i));return r},r.range=function(n){return arguments.length?(t=Wa.call(n),r):t.slice()},r.unknown=function(t){return arguments.length?(i=t,r):i},r.copy=function(){return Ja().domain(e).range(t).unknown(i)},r}var Ga=function(t){return function(){return t}},Ka=function(t){return+t},to=[0,1];function no(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Ga(n)}function eo(t,n,e,i){var r=t[0],a=t[1],o=n[0],u=n[1];return a<r?(r=e(a,r),o=i(u,o)):(r=e(r,a),o=i(o,u)),function(t){return o(r(t))}}function io(t,n,e,i){var r=Math.min(t.length,n.length)-1,a=new Array(r),o=new Array(r),s=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++s<r;)a[s]=e(t[s],t[s+1]),o[s]=i(n[s],n[s+1]);return function(n){var e=u(t,n,1,r)-1;return o[e](a[e](n))}}function ro(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function ao(t,n){var e,i,r,a=to,o=to,u=ae,s=!1;function c(){return e=Math.min(a.length,o.length)>2?io:eo,i=r=null,f}function f(n){return(i||(i=e(a,o,s?function(t){return function(n,e){var i=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:i(t)}}}(t):t,u)))(+n)}return f.invert=function(t){return(r||(r=e(o,a,no,s?function(t){return function(n,e){var i=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:i(t)}}}(n):n)))(+t)},f.domain=function(t){return arguments.length?(a=Ba.call(t,Ka),c()):a.slice()},f.range=function(t){return arguments.length?(o=Wa.call(t),c()):o.slice()},f.rangeRound=function(t){return o=Wa.call(t),u=oe,c()},f.clamp=function(t){return arguments.length?(s=!!t,c()):s},f.interpolate=function(t){return arguments.length?(u=t,c()):u},c()}var oo=function(t,n,e){var i,r=t[0],a=t[t.length-1],o=d(r,a,null==n?10:n);switch((e=vr(null==e?",f":e)).type){case"s":var u=Math.max(Math.abs(r),Math.abs(a));return null!=e.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(_r(n)/3)))-_r(Math.abs(t)))}(o,u))||(e.precision=i),wr(e,u);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,_r(n)-_r(t))+1}(o,Math.max(Math.abs(r),Math.abs(a))))||(e.precision=i-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(i=function(t){return Math.max(0,-_r(Math.abs(t)))}(o))||(e.precision=i-2*("%"===e.type))}return br(e)};function uo(t){var n=t.domain;return t.ticks=function(t){var e=n();return l(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return oo(n(),t,e)},t.nice=function(e){null==e&&(e=10);var i,r=n(),a=0,o=r.length-1,u=r[a],s=r[o];return s<u&&(i=u,u=s,s=i,i=a,a=o,o=i),(i=_(u,s,e))>0?i=_(u=Math.floor(u/i)*i,s=Math.ceil(s/i)*i,e):i<0&&(i=_(u=Math.ceil(u*i)/i,s=Math.floor(s*i)/i,e)),i>0?(r[a]=Math.floor(u/i)*i,r[o]=Math.ceil(s/i)*i,n(r)):i<0&&(r[a]=Math.ceil(u*i)/i,r[o]=Math.floor(s*i)/i,n(r)),t},t}function so(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function co(){var t=1,n=ao((function(n,e){return(e=so(e,t)-(n=so(n,t)))?function(i){return(so(i,t)-n)/e}:Ga(e)}),(function(n,e){return e=so(e,t)-(n=so(n,t)),function(i){return so(n+e*i,1/t)}})),e=n.domain;return n.exponent=function(n){return arguments.length?(t=+n,e(e())):t},n.copy=function(){return ro(n,co().exponent(t))},uo(n)}var fo=new Date,ho=new Date;function lo(t,n,e,i){function r(n){return t(n=new Date(+n)),n}return r.floor=r,r.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},r.round=function(t){var n=r(t),e=r.ceil(t);return t-n<e-t?n:e},r.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},r.range=function(e,i,a){var o,u=[];if(e=r.ceil(e),a=null==a?1:Math.floor(a),!(e<i&&a>0))return u;do{u.push(o=new Date(+e)),n(e,a),t(e)}while(o<e&&e<i);return u},r.filter=function(e){return lo((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,i){if(t>=t)if(i<0)for(;++i<=0;)for(;n(t,-1),!e(t););else for(;--i>=0;)for(;n(t,1),!e(t););}))},e&&(r.count=function(n,i){return fo.setTime(+n),ho.setTime(+i),t(fo),t(ho),Math.floor(e(fo,ho))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?function(n){return i(n)%t==0}:function(n){return r.count(0,n)%t==0}):r:null}),r}var _o=lo((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));_o.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?lo((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):_o:null};_o.range;var po=6e4,yo=6048e5,vo=lo((function(t){t.setTime(1e3*Math.floor(t/1e3))}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()})),go=(vo.range,lo((function(t){t.setTime(Math.floor(t/po)*po)}),(function(t,n){t.setTime(+t+n*po)}),(function(t,n){return(n-t)/po}),(function(t){return t.getMinutes()}))),xo=(go.range,lo((function(t){var n=t.getTimezoneOffset()*po%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),bo=(xo.range,lo((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*po)/864e5}),(function(t){return t.getDate()-1}))),wo=bo;bo.range;function mo(t){return lo((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*po)/yo}))}var Mo=mo(0),No=mo(1),To=mo(2),ko=mo(3),Ao=mo(4),Co=mo(5),So=mo(6),Eo=(Mo.range,No.range,To.range,ko.range,Ao.range,Co.range,So.range,lo((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),Uo=(Eo.range,lo((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()})));Uo.every=function(t){return isFinite(t=Math.floor(t))&&t>0?lo((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Lo=Uo,Po=(Uo.range,lo((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*po)}),(function(t,n){return(n-t)/po}),(function(t){return t.getUTCMinutes()}))),Do=(Po.range,lo((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),Ro=(Do.range,lo((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),qo=Ro;Ro.range;function Yo(t){return lo((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/yo}))}var Fo=Yo(0),zo=Yo(1),Ho=Yo(2),Oo=Yo(3),jo=Yo(4),Xo=Yo(5),Io=Yo(6),$o=(Fo.range,zo.range,Ho.range,Oo.range,jo.range,Xo.range,Io.range,lo((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}))),Vo=($o.range,lo((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Vo.every=function(t){return isFinite(t=Math.floor(t))&&t>0?lo((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var Zo=Vo;Vo.range;function Bo(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Wo(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Qo(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var Jo,Go,Ko,tu={"-":"",_:" ",0:"0"},nu=/^\s*\d+/,eu=/^%/,iu=/[\\^$*+?|[\]().{}]/g;function ru(t,n,e){var i=t<0?"-":"",r=(i?-t:t)+"",a=r.length;return i+(a<e?new Array(e-a+1).join(n)+r:r)}function au(t){return t.replace(iu,"\\$&")}function ou(t){return new RegExp("^(?:"+t.map(au).join("|")+")","i")}function uu(t){for(var n={},e=-1,i=t.length;++e<i;)n[t[e].toLowerCase()]=e;return n}function su(t,n,e){var i=nu.exec(n.slice(e,e+1));return i?(t.w=+i[0],e+i[0].length):-1}function cu(t,n,e){var i=nu.exec(n.slice(e,e+1));return i?(t.u=+i[0],e+i[0].length):-1}function fu(t,n,e){var i=nu.exec(n.slice(e,e+2));return i?(t.U=+i[0],e+i[0].length):-1}function hu(t,n,e){var i=nu.exec(n.slice(e,e+2));return i?(t.V=+i[0],e+i[0].length):-1}function lu(t,n,e){var i=nu.exec(n.slice(e,e+2));return i?(t.W=+i[0],e+i[0].length):-1}function _u(t,n,e){var i=nu.exec(n.slice(e,e+4));return i?(t.y=+i[0],e+i[0].length):-1}function du(t,n,e){var i=nu.exec(n.slice(e,e+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),e+i[0].length):-1}function pu(t,n,e){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),e+i[0].length):-1}function yu(t,n,e){var i=nu.exec(n.slice(e,e+2));return i?(t.m=i[0]-1,e+i[0].length):-1}function vu(t,n,e){var i=nu.exec(n.slice(e,e+2));return i?(t.d=+i[0],e+i[0].length):-1}function gu(t,n,e){var i=nu.exec(n.slice(e,e+3));return i?(t.m=0,t.d=+i[0],e+i[0].length):-1}function xu(t,n,e){var i=nu.exec(n.slice(e,e+2));return i?(t.H=+i[0],e+i[0].length):-1}function bu(t,n,e){var i=nu.exec(n.slice(e,e+2));return i?(t.M=+i[0],e+i[0].length):-1}function wu(t,n,e){var i=nu.exec(n.slice(e,e+2));return i?(t.S=+i[0],e+i[0].length):-1}function mu(t,n,e){var i=nu.exec(n.slice(e,e+3));return i?(t.L=+i[0],e+i[0].length):-1}function Mu(t,n,e){var i=nu.exec(n.slice(e,e+6));return i?(t.L=Math.floor(i[0]/1e3),e+i[0].length):-1}function Nu(t,n,e){var i=eu.exec(n.slice(e,e+1));return i?e+i[0].length:-1}function Tu(t,n,e){var i=nu.exec(n.slice(e));return i?(t.Q=+i[0],e+i[0].length):-1}function ku(t,n,e){var i=nu.exec(n.slice(e));return i?(t.Q=1e3*+i[0],e+i[0].length):-1}function Au(t,n){return ru(t.getDate(),n,2)}function Cu(t,n){return ru(t.getHours(),n,2)}function Su(t,n){return ru(t.getHours()%12||12,n,2)}function Eu(t,n){return ru(1+wo.count(Lo(t),t),n,3)}function Uu(t,n){return ru(t.getMilliseconds(),n,3)}function Lu(t,n){return Uu(t,n)+"000"}function Pu(t,n){return ru(t.getMonth()+1,n,2)}function Du(t,n){return ru(t.getMinutes(),n,2)}function Ru(t,n){return ru(t.getSeconds(),n,2)}function qu(t){var n=t.getDay();return 0===n?7:n}function Yu(t,n){return ru(Mo.count(Lo(t),t),n,2)}function Fu(t,n){var e=t.getDay();return t=e>=4||0===e?Ao(t):Ao.ceil(t),ru(Ao.count(Lo(t),t)+(4===Lo(t).getDay()),n,2)}function zu(t){return t.getDay()}function Hu(t,n){return ru(No.count(Lo(t),t),n,2)}function Ou(t,n){return ru(t.getFullYear()%100,n,2)}function ju(t,n){return ru(t.getFullYear()%1e4,n,4)}function Xu(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+ru(n/60|0,"0",2)+ru(n%60,"0",2)}function Iu(t,n){return ru(t.getUTCDate(),n,2)}function $u(t,n){return ru(t.getUTCHours(),n,2)}function Vu(t,n){return ru(t.getUTCHours()%12||12,n,2)}function Zu(t,n){return ru(1+qo.count(Zo(t),t),n,3)}function Bu(t,n){return ru(t.getUTCMilliseconds(),n,3)}function Wu(t,n){return Bu(t,n)+"000"}function Qu(t,n){return ru(t.getUTCMonth()+1,n,2)}function Ju(t,n){return ru(t.getUTCMinutes(),n,2)}function Gu(t,n){return ru(t.getUTCSeconds(),n,2)}function Ku(t){var n=t.getUTCDay();return 0===n?7:n}function ts(t,n){return ru(Fo.count(Zo(t),t),n,2)}function ns(t,n){var e=t.getUTCDay();return t=e>=4||0===e?jo(t):jo.ceil(t),ru(jo.count(Zo(t),t)+(4===Zo(t).getUTCDay()),n,2)}function es(t){return t.getUTCDay()}function is(t,n){return ru(zo.count(Zo(t),t),n,2)}function rs(t,n){return ru(t.getUTCFullYear()%100,n,2)}function as(t,n){return ru(t.getUTCFullYear()%1e4,n,4)}function os(){return"+0000"}function us(){return"%"}function ss(t){return+t}function cs(t){return Math.floor(+t/1e3)}!function(t){Jo=function(t){var n=t.dateTime,e=t.date,i=t.time,r=t.periods,a=t.days,o=t.shortDays,u=t.months,s=t.shortMonths,c=ou(r),f=uu(r),h=ou(a),l=uu(a),_=ou(o),d=uu(o),p=ou(u),y=uu(u),v=ou(s),g=uu(s),x={a:function(t){return o[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Au,e:Au,f:Lu,H:Cu,I:Su,j:Eu,L:Uu,m:Pu,M:Du,p:function(t){return r[+(t.getHours()>=12)]},Q:ss,s:cs,S:Ru,u:qu,U:Yu,V:Fu,w:zu,W:Hu,x:null,X:null,y:Ou,Y:ju,Z:Xu,"%":us},b={a:function(t){return o[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Iu,e:Iu,f:Wu,H:$u,I:Vu,j:Zu,L:Bu,m:Qu,M:Ju,p:function(t){return r[+(t.getUTCHours()>=12)]},Q:ss,s:cs,S:Gu,u:Ku,U:ts,V:ns,w:es,W:is,x:null,X:null,y:rs,Y:as,Z:os,"%":us},w={a:function(t,n,e){var i=_.exec(n.slice(e));return i?(t.w=d[i[0].toLowerCase()],e+i[0].length):-1},A:function(t,n,e){var i=h.exec(n.slice(e));return i?(t.w=l[i[0].toLowerCase()],e+i[0].length):-1},b:function(t,n,e){var i=v.exec(n.slice(e));return i?(t.m=g[i[0].toLowerCase()],e+i[0].length):-1},B:function(t,n,e){var i=p.exec(n.slice(e));return i?(t.m=y[i[0].toLowerCase()],e+i[0].length):-1},c:function(t,e,i){return N(t,n,e,i)},d:vu,e:vu,f:Mu,H:xu,I:xu,j:gu,L:mu,m:yu,M:bu,p:function(t,n,e){var i=c.exec(n.slice(e));return i?(t.p=f[i[0].toLowerCase()],e+i[0].length):-1},Q:Tu,s:ku,S:wu,u:cu,U:fu,V:hu,w:su,W:lu,x:function(t,n,i){return N(t,e,n,i)},X:function(t,n,e){return N(t,i,n,e)},y:du,Y:_u,Z:pu,"%":Nu};function m(t,n){return function(e){var i,r,a,o=[],u=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++u<c;)37===t.charCodeAt(u)&&(o.push(t.slice(s,u)),null!=(r=tu[i=t.charAt(++u)])?i=t.charAt(++u):r="e"===i?" ":"0",(a=n[i])&&(i=a(e,r)),o.push(i),s=u+1);return o.push(t.slice(s,u)),o.join("")}}function M(t,n){return function(e){var i,r,a=Qo(1900);if(N(a,t,e+="",0)!=e.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(r=(i=Wo(Qo(a.y))).getUTCDay(),i=r>4||0===r?zo.ceil(i):zo(i),i=qo.offset(i,7*(a.V-1)),a.y=i.getUTCFullYear(),a.m=i.getUTCMonth(),a.d=i.getUTCDate()+(a.w+6)%7):(r=(i=n(Qo(a.y))).getDay(),i=r>4||0===r?No.ceil(i):No(i),i=wo.offset(i,7*(a.V-1)),a.y=i.getFullYear(),a.m=i.getMonth(),a.d=i.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),r="Z"in a?Wo(Qo(a.y)).getUTCDay():n(Qo(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(r+5)%7:a.w+7*a.U-(r+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,Wo(a)):n(a)}}function N(t,n,e,i){for(var r,a,o=0,u=n.length,s=e.length;o<u;){if(i>=s)return-1;if(37===(r=n.charCodeAt(o++))){if(r=n.charAt(o++),!(a=w[r in tu?n.charAt(o++):r])||(i=a(t,e,i))<0)return-1}else if(r!=e.charCodeAt(i++))return-1}return i}return(x.x=m(e,x),x.X=m(i,x),x.c=m(n,x),b.x=m(e,b),b.X=m(i,b),b.c=m(n,b),{format:function(t){var n=m(t+="",x);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",Bo);return n.toString=function(){return t},n},utcFormat:function(t){var n=m(t+="",b);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,Wo);return n.toString=function(){return t},n}})}(t),Jo.format,Jo.parse,Go=Jo.utcFormat,Ko=Jo.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Go("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Ko("%Y-%m-%dT%H:%M:%S.%LZ");var fs=function(t){return t.match(/.{6}/g).map((function(t){return"#"+t}))};fs("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),fs("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),fs("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),fs("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),ge(Fn(300,.5,0),Fn(-240,.5,1)),ge(Fn(-100,.75,.35),Fn(80,1.5,.8)),ge(Fn(260,.75,.35),Fn(80,1.5,.8)),Fn();function hs(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}hs(fs("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),hs(fs("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),hs(fs("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),hs(fs("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var ls=1e-12,_s=Math.PI,ds=2*_s;function ps(t){this._context=t}ps.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var ys=function(t){return new ps(t)};gs(ys);function vs(t){this._curve=t}function gs(t){function n(n){return new vs(t(n))}return n._curve=t,n}vs.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var xs=Math.sin(_s/10)/Math.sin(7*_s/10),bs=(Math.sin(ds/10),Math.cos(ds/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function ws(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function ms(t){this._context=t}ms.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:ws(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:ws(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Ms(t){this._context=t}Ms.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:ws(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Ns(t){this._context=t}Ns.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,i=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,i):this._context.moveTo(e,i);break;case 3:this._point=4;default:ws(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Ts(t,n){this._basis=new ms(t),this._beta=n}Ts.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var i,r=t[0],a=n[0],o=t[e]-r,u=n[e]-a,s=-1;++s<=e;)i=s/e,this._basis.point(this._beta*t[s]+(1-this._beta)*(r+i*o),this._beta*n[s]+(1-this._beta)*(a+i*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new ms(t):new Ts(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function ks(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function As(t,n){this._context=t,this._k=(1-n)/6}As.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:ks(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:ks(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new As(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Cs(t,n){this._context=t,this._k=(1-n)/6}Cs.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:ks(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Cs(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Ss(t,n){this._context=t,this._k=(1-n)/6}Ss.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:ks(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Ss(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Es(t,n,e){var i=t._x1,r=t._y1,a=t._x2,o=t._y2;if(t._l01_a>ls){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,r=(r*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>ls){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,f=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*c+t._x1*t._l23_2a-n*t._l12_2a)/f,o=(o*c+t._y1*t._l23_2a-e*t._l12_2a)/f}t._context.bezierCurveTo(i,r,a,o,t._x2,t._y2)}function Us(t,n){this._context=t,this._alpha=n}Us.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Es(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Us(t,n):new As(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Ls(t,n){this._context=t,this._alpha=n}Ls.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Es(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Ls(t,n):new Cs(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Ps(t,n){this._context=t,this._alpha=n}Ps.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Es(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Ps(t,n):new Ss(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Ds(t){this._context=t}Ds.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function Rs(t){return t<0?-1:1}function qs(t,n,e){var i=t._x1-t._x0,r=n-t._x1,a=(t._y1-t._y0)/(i||r<0&&-0),o=(e-t._y1)/(r||i<0&&-0),u=(a*r+o*i)/(i+r);return(Rs(a)+Rs(o))*Math.min(Math.abs(a),Math.abs(o),.5*Math.abs(u))||0}function Ys(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Fs(t,n,e){var i=t._x0,r=t._y0,a=t._x1,o=t._y1,u=(a-i)/3;t._context.bezierCurveTo(i+u,r+u*n,a-u,o-u*e,a,o)}function zs(t){this._context=t}function Hs(t){this._context=new Os(t)}function Os(t){this._context=t}function js(t){this._context=t}function Xs(t){var n,e,i=t.length-1,r=new Array(i),a=new Array(i),o=new Array(i);for(r[0]=0,a[0]=2,o[0]=t[0]+2*t[1],n=1;n<i-1;++n)r[n]=1,a[n]=4,o[n]=4*t[n]+2*t[n+1];for(r[i-1]=2,a[i-1]=7,o[i-1]=8*t[i-1]+t[i],n=1;n<i;++n)e=r[n]/a[n-1],a[n]-=e,o[n]-=e*o[n-1];for(r[i-1]=o[i-1]/a[i-1],n=i-2;n>=0;--n)r[n]=(o[n]-r[n+1])/a[n];for(a[i-1]=(t[i]+r[i-1])/2,n=0;n<i-1;++n)a[n]=2*t[n+1]-r[n+1];return[r,a]}zs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Fs(this,this._t0,Ys(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Fs(this,Ys(this,e=qs(this,t,n)),e);break;default:Fs(this,this._t0,e=qs(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Hs.prototype=Object.create(zs.prototype)).point=function(t,n){zs.prototype.point.call(this,n,t)},Os.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,i,r,a){this._context.bezierCurveTo(n,t,i,e,a,r)}},js.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var i=Xs(t),r=Xs(n),a=0,o=1;o<e;++a,++o)this._context.bezierCurveTo(i[0][a],r[0][a],i[1][a],r[1][a],t[o],n[o]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function Is(t,n){this._context=t,this._t=n}Is.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};function $s(){this._=null}function Vs(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Zs(t,n){var e=n,i=n.R,r=e.U;r?r.L===e?r.L=i:r.R=i:t._=i,i.U=r,e.U=i,e.R=i.L,e.R&&(e.R.U=e),i.L=e}function Bs(t,n){var e=n,i=n.L,r=e.U;r?r.L===e?r.L=i:r.R=i:t._=i,i.U=r,e.U=i,e.L=i.R,e.L&&(e.L.U=e),i.R=e}function Ws(t){for(;t.L;)t=t.L;return t}$s.prototype={constructor:$s,insert:function(t,n){var e,i,r;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Ws(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(i=e.U).L?(r=i.R)&&r.C?(e.C=r.C=!1,i.C=!0,t=i):(t===e.R&&(Zs(this,e),e=(t=e).U),e.C=!1,i.C=!0,Bs(this,i)):(r=i.L)&&r.C?(e.C=r.C=!1,i.C=!0,t=i):(t===e.L&&(Bs(this,e),e=(t=e).U),e.C=!1,i.C=!0,Zs(this,i)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,i,r=t.U,a=t.L,o=t.R;if(e=a?o?Ws(o):a:o,r?r.L===t?r.L=e:r.R=e:this._=e,a&&o?(i=e.C,e.C=t.C,e.L=a,a.U=e,e!==o?(r=e.U,e.U=t.U,t=e.R,r.L=t,e.R=o,o.U=e):(e.U=r,r=e,t=e.R)):(i=t.C,t=e),t&&(t.U=r),!i)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===r.L){if((n=r.R).C&&(n.C=!1,r.C=!0,Zs(this,r),n=r.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Bs(this,n),n=r.R),n.C=r.C,r.C=n.R.C=!1,Zs(this,r),t=this._;break}}else if((n=r.L).C&&(n.C=!1,r.C=!0,Bs(this,r),n=r.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Zs(this,n),n=r.L),n.C=r.C,r.C=n.L.C=!1,Bs(this,r),t=this._;break}n.C=!0,t=r,r=r.U}while(!t.C);t&&(t.C=!1)}}};var Qs=$s;function Js(t,n,e,i){var r=[null,null],a=wc.push(r)-1;return r.left=t,r.right=n,e&&Ks(r,t,n,e),i&&Ks(r,n,t,i),xc[t.index].halfedges.push(a),xc[n.index].halfedges.push(a),r}function Gs(t,n,e){var i=[n,e];return i.left=t,i}function Ks(t,n,e,i){t[0]||t[1]?t.left===e?t[1]=i:t[0]=i:(t[0]=i,t.left=n,t.right=e)}function tc(t,n,e,i,r){var a,o=t[0],u=t[1],s=o[0],c=o[1],f=0,h=1,l=u[0]-s,_=u[1]-c;if(a=n-s,l||!(a>0)){if(a/=l,l<0){if(a<f)return;a<h&&(h=a)}else if(l>0){if(a>h)return;a>f&&(f=a)}if(a=i-s,l||!(a<0)){if(a/=l,l<0){if(a>h)return;a>f&&(f=a)}else if(l>0){if(a<f)return;a<h&&(h=a)}if(a=e-c,_||!(a>0)){if(a/=_,_<0){if(a<f)return;a<h&&(h=a)}else if(_>0){if(a>h)return;a>f&&(f=a)}if(a=r-c,_||!(a<0)){if(a/=_,_<0){if(a>h)return;a>f&&(f=a)}else if(_>0){if(a<f)return;a<h&&(h=a)}return!(f>0||h<1)||(f>0&&(t[0]=[s+f*l,c+f*_]),h<1&&(t[1]=[s+h*l,c+h*_]),!0)}}}}}function nc(t,n,e,i,r){var a=t[1];if(a)return!0;var o,u,s=t[0],c=t.left,f=t.right,h=c[0],l=c[1],_=f[0],d=f[1],p=(h+_)/2,y=(l+d)/2;if(d===l){if(p<n||p>=i)return;if(h>_){if(s){if(s[1]>=r)return}else s=[p,e];a=[p,r]}else{if(s){if(s[1]<e)return}else s=[p,r];a=[p,e]}}else if(u=y-(o=(h-_)/(d-l))*p,o<-1||o>1)if(h>_){if(s){if(s[1]>=r)return}else s=[(e-u)/o,e];a=[(r-u)/o,r]}else{if(s){if(s[1]<e)return}else s=[(r-u)/o,r];a=[(e-u)/o,e]}else if(l<d){if(s){if(s[0]>=i)return}else s=[n,o*n+u];a=[i,o*i+u]}else{if(s){if(s[0]<n)return}else s=[i,o*i+u];a=[n,o*n+u]}return t[0]=s,t[1]=a,!0}function ec(t,n){var e=t.site,i=n.left,r=n.right;return e===r&&(r=i,i=e),r?Math.atan2(r[1]-i[1],r[0]-i[0]):(e===i?(i=n[1],r=n[0]):(i=n[0],r=n[1]),Math.atan2(i[0]-r[0],r[1]-i[1]))}function ic(t,n){return n[+(n.left!==t.site)]}function rc(t,n){return n[+(n.left===t.site)]}var ac,oc=[];function uc(){Vs(this),this.x=this.y=this.arc=this.site=this.cy=null}function sc(t){var n=t.P,e=t.N;if(n&&e){var i=n.site,r=t.site,a=e.site;if(i!==a){var o=r[0],u=r[1],s=i[0]-o,c=i[1]-u,f=a[0]-o,h=a[1]-u,l=2*(s*h-c*f);if(!(l>=-Mc)){var _=s*s+c*c,d=f*f+h*h,p=(h*_-c*d)/l,y=(s*d-f*_)/l,v=oc.pop()||new uc;v.arc=t,v.site=r,v.x=p+o,v.y=(v.cy=y+u)+Math.sqrt(p*p+y*y),t.circle=v;for(var g=null,x=bc._;x;)if(v.y<x.y||v.y===x.y&&v.x<=x.x){if(!x.L){g=x.P;break}x=x.L}else{if(!x.R){g=x;break}x=x.R}bc.insert(g,v),g||(ac=v)}}}}function cc(t){var n=t.circle;n&&(n.P||(ac=n.N),bc.remove(n),oc.push(n),Vs(n),t.circle=null)}var fc=[];function hc(){Vs(this),this.edge=this.site=this.circle=null}function lc(t){var n=fc.pop()||new hc;return n.site=t,n}function _c(t){cc(t),gc.remove(t),fc.push(t),Vs(t)}function dc(t){var n=t.circle,e=n.x,i=n.cy,r=[e,i],a=t.P,o=t.N,u=[t];_c(t);for(var s=a;s.circle&&Math.abs(e-s.circle.x)<mc&&Math.abs(i-s.circle.cy)<mc;)a=s.P,u.unshift(s),_c(s),s=a;u.unshift(s),cc(s);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<mc&&Math.abs(i-c.circle.cy)<mc;)o=c.N,u.push(c),_c(c),c=o;u.push(c),cc(c);var f,h=u.length;for(f=1;f<h;++f)c=u[f],s=u[f-1],Ks(c.edge,s.site,c.site,r);s=u[0],(c=u[h-1]).edge=Js(s.site,c.site,null,r),sc(s),sc(c)}function pc(t){for(var n,e,i,r,a=t[0],o=t[1],u=gc._;u;)if((i=yc(u,o)-a)>mc)u=u.L;else{if(!((r=a-vc(u,o))>mc)){i>-mc?(n=u.P,e=u):r>-mc?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}!function(t){xc[t.index]={site:t,halfedges:[]}}(t);var s=lc(t);if(gc.insert(n,s),n||e){if(n===e)return cc(n),e=lc(n.site),gc.insert(s,e),s.edge=e.edge=Js(n.site,s.site),sc(n),void sc(e);if(e){cc(n),cc(e);var c=n.site,f=c[0],h=c[1],l=t[0]-f,_=t[1]-h,d=e.site,p=d[0]-f,y=d[1]-h,v=2*(l*y-_*p),g=l*l+_*_,x=p*p+y*y,b=[(y*g-_*x)/v+f,(l*x-p*g)/v+h];Ks(e.edge,c,d,b),s.edge=Js(c,t,null,b),e.edge=Js(t,d,null,b),sc(n),sc(e)}else s.edge=Js(n.site,s.site)}}function yc(t,n){var e=t.site,i=e[0],r=e[1],a=r-n;if(!a)return i;var o=t.P;if(!o)return-1/0;var u=(e=o.site)[0],s=e[1],c=s-n;if(!c)return u;var f=u-i,h=1/a-1/c,l=f/c;return h?(-l+Math.sqrt(l*l-2*h*(f*f/(-2*c)-s+c/2+r-a/2)))/h+i:(i+u)/2}function vc(t,n){var e=t.N;if(e)return yc(e,n);var i=t.site;return i[1]===n?i[0]:1/0}var gc,xc,bc,wc,mc=1e-6,Mc=1e-12;function Nc(t,n){return n[1]-t[1]||n[0]-t[0]}function Tc(t,n){var e,i,r,a=t.sort(Nc).pop();for(wc=[],xc=new Array(t.length),gc=new Qs,bc=new Qs;;)if(r=ac,a&&(!r||a[1]<r.y||a[1]===r.y&&a[0]<r.x))a[0]===e&&a[1]===i||(pc(a),e=a[0],i=a[1]),a=t.pop();else{if(!r)break;dc(r.arc)}if(function(){for(var t,n,e,i,r=0,a=xc.length;r<a;++r)if((t=xc[r])&&(i=(n=t.halfedges).length)){var o=new Array(i),u=new Array(i);for(e=0;e<i;++e)o[e]=e,u[e]=ec(t,wc[n[e]]);for(o.sort((function(t,n){return u[n]-u[t]})),e=0;e<i;++e)u[e]=n[o[e]];for(e=0;e<i;++e)n[e]=u[e]}}(),n){var o=+n[0][0],u=+n[0][1],s=+n[1][0],c=+n[1][1];!function(t,n,e,i){for(var r,a=wc.length;a--;)nc(r=wc[a],t,n,e,i)&&tc(r,t,n,e,i)&&(Math.abs(r[0][0]-r[1][0])>mc||Math.abs(r[0][1]-r[1][1])>mc)||delete wc[a]}(o,u,s,c),function(t,n,e,i){var r,a,o,u,s,c,f,h,l,_,d,p,y=xc.length,v=!0;for(r=0;r<y;++r)if(a=xc[r]){for(o=a.site,u=(s=a.halfedges).length;u--;)wc[s[u]]||s.splice(u,1);for(u=0,c=s.length;u<c;)d=(_=rc(a,wc[s[u]]))[0],p=_[1],h=(f=ic(a,wc[s[++u%c]]))[0],l=f[1],(Math.abs(d-h)>mc||Math.abs(p-l)>mc)&&(s.splice(u,0,wc.push(Gs(o,_,Math.abs(d-t)<mc&&i-p>mc?[t,Math.abs(h-t)<mc?l:i]:Math.abs(p-i)<mc&&e-d>mc?[Math.abs(l-i)<mc?h:e,i]:Math.abs(d-e)<mc&&p-n>mc?[e,Math.abs(h-e)<mc?l:n]:Math.abs(p-n)<mc&&d-t>mc?[Math.abs(l-n)<mc?h:t,n]:null))-1),++c);c&&(v=!1)}if(v){var g,x,b,w=1/0;for(r=0,v=null;r<y;++r)(a=xc[r])&&(b=(g=(o=a.site)[0]-t)*g+(x=o[1]-n)*x)<w&&(w=b,v=a);if(v){var m=[t,n],M=[t,i],N=[e,i],T=[e,n];v.halfedges.push(wc.push(Gs(o=v.site,m,M))-1,wc.push(Gs(o,M,N))-1,wc.push(Gs(o,N,T))-1,wc.push(Gs(o,T,m))-1)}}for(r=0;r<y;++r)(a=xc[r])&&(a.halfedges.length||delete xc[r])}(o,u,s,c)}this.edges=wc,this.cells=xc,gc=bc=wc=xc=null}Tc.prototype={constructor:Tc,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return ic(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,i){if(a=(r=e.halfedges).length)for(var r,a,o,u,s,c,f=e.site,h=-1,l=n[r[a-1]],_=l.left===f?l.right:l.left;++h<a;)o=_,_=(l=n[r[h]]).left===f?l.right:l.left,o&&_&&i<o.index&&i<_.index&&(s=o,c=_,((u=f)[0]-c[0])*(s[1]-u[1])-(u[0]-s[0])*(c[1]-u[1])<0)&&t.push([f.data,o.data,_.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var i,r,a=this,o=a._found||0,u=a.cells.length;!(r=a.cells[o]);)if(++o>=u)return null;var s=t-r.site[0],c=n-r.site[1],f=s*s+c*c;do{r=a.cells[i=o],o=null,r.halfedges.forEach((function(e){var i=a.edges[e],u=i.left;if(u!==r.site&&u||(u=i.right)){var s=t-u[0],c=n-u[1],h=s*s+c*c;h<f&&(f=h,o=u.index)}}))}while(null!==o);return a._found=i,null==e||f<=e*e?r.site:null}};function kc(t,n,e){this.k=t,this.x=n,this.y=e}kc.prototype={constructor:kc,scale:function(t){return 1===t?this:new kc(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new kc(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new kc(1,0,0);kc.prototype;var Ac=function(t,n){var e=Ft("body").append("div").attr("class","tooltip").attr("id",t).style("pointer-events","none");function i(){e.style("opacity",0)}function r(t){var n=e.style("width"),i=e.style("height"),r=window.scrollY,a=window.scrollX,o=document.all?t.clientX+a:t.pageX,u=document.all?t.clientY+r:t.pageY,s=o-a+40+n>window.innerWidth?o-n-40:o+20;s<a+20&&(s=a+20);var c=u-r+20+i>window.innerHeight?u-i-20:u+10;c<r+10&&(c=u+10),e.style("top",c+"px").style("left",s+"px")}return n&&e.style("width",n),i(),{showTooltip:function(t,n){e.style("opacity",1).html(t),r(n)},hideTooltip:i,updatePosition:r}};!function(){var t=window.innerWidth,n=Ac("breach_tooltip",250),e={x:t/2,y:200},i={2014:{x:t/3,y:200},2015:{x:t/2,y:200},2016:{x:2*t/3,y:200},2017:{x:t/3-100,y:200},2018:{x:t/2-15,y:200},2019:{x:2*t/3+100,y:200}},r={2014:160,2015:t/2,2016:t-160,2017:t/3-100,2018:t/1.5,2019:2*t/3+125},a={"Account Access":{x:t/6,y:200},"Existential Data":{x:2*t/6,y:200},"Financial Access":{x:3*t/6,y:200},"Identity Theft":{x:4*t/6,y:200},Nuisance:{x:5*t/6,y:200}},o={"Account Access":t/6,"Existential Data":2*t/6+30,"Financial Access":3*t/6+15,"Identity Theft":4*t/6+25,Nuisance:5*t/6+35},u={"Malicious Outsider":{x:t/6,y:200},"Malicious Insider":{x:2*t/6,y:200},"State Sponsored":{x:3*t/6,y:200},"Accidental Loss":{x:4*t/6,y:200},Hacktivist:{x:5*t/6,y:200}},s={"Malicious Outsider":t/6,"Malicious Insider":2*t/6+30,"State Sponsored":3*t/6+15,"Accidental Loss":4*t/6+25,Hacktivist:5*t/6+35},c={Technology:{x:t/6,y:200},Retail:{x:2*t/6,y:200},Financial:{x:3*t/6,y:200},Education:{x:4*t/6,y:200},Healthcare:{x:5*t/6,y:200},Government:{x:6*t/6,y:200},Other:{x:7*t/6,y:200}},f={Technology:t/6,Retail:2*t/6+30,Financial:3*t/6+15,Education:4*t/6+25,Healthcare:5*t/6+35,Government:6*t/6+10,Other:7*t/6+20},h=.03,l=null,_=null,d=[],y=sr().velocityDecay(.2).force("x",fr().strength(h).x(e.x)).force("y",hr().strength(h).y(e.y)).force("charge",cr().strength((function(t){return-Math.pow(t.radius,2)*h}))).on("tick",(function(){_.attr("cx",(function(t){return t.x})).attr("cy",(function(t){return t.y}))}));y.stop();var v=Ja().domain(["Global","Asia","Africa","Australia","Europe","North America","South America"]).range(["#ec1919","#ff1f5a","#00f9ff","#7cbd1e","#2fc5cc","#303481","#ff5b44"]),g=function(n,e){d=function(t){var n=p(t,(function(t){return+t.records})),e=co().exponent(.5).range([2,85]).domain([0,n]),i=t.map((function(t){return{id:t.id,radius:e(+t.records),value:+t.records,name:t.organization,type:t.type,source:t.source,industry:t.industry,year:t.year,continent:t.continent,x:900*Math.random(),y:800*Math.random()}}));return i.sort((function(t,n){return n.value-t.value})),i}(e),l=Ft(n).append("svg").attr("width",t).attr("height",400);var i=(_=l.selectAll(".bubble").data(d,(function(t){return t.id}))).enter().append("circle").classed("bubble",!0).attr("r",0).attr("fill",(function(t){return v(t.group)})).attr("stroke",(function(t){return sn(v(t.group)).darker()})).attr("stroke-width",2).on("mouseover",S).on("mouseout",E);(_=_.merge(i)).transition().duration(2e3).attr("r",(function(t){return t.radius})),y.nodes(d),M()};function x(t){return i[t.year].x}function b(t){return a[t.type].x}function w(t){return u[t.source].x}function m(t){return c[t.industry].x}function M(){T(),y.force("x",fr().strength(h).x(e.x)),y.alpha(1).restart()}function N(){var t;t=Ri(r),l.selectAll(".year").data(t).enter().append("text").attr("class","year").attr("x",(function(t){return r[t]})).attr("y",40).attr("text-anchor","middle").text((function(t){return t})),y.force("x",fr().strength(h).x(x)),y.alpha(1).restart()}function T(){l.selectAll(".year").remove()}function k(){l.selectAll(".type").remove()}function A(){l.selectAll(".source").remove()}function C(){l.selectAll(".industry").remove()}function S(t){Ft(this).attr("stroke","black");var e='<span class="name">Title: </span><span class="value">'+t.name+'</span><br/><span class="name">Amount: </span><span class="value">'+function(t){var n=(t+="").split("."),e=n[0],i=n.length>1?"."+n[1]:"",r=/(\d+)(\d{3})/;for(;r.test(e);)e=e.replace(r,"$1,$2");return e+i}(t.value)+'</span><br/><span class="name">Year: </span><span class="value">'+t.year+"</span>";n.showTooltip(e,Tt)}function E(t){Ft(this).attr("stroke",sn(v(t.group)).darker()),n.hideTooltip()}g.toggleDisplay=function(t){var n,e,i;"year"===t?(k(),A(),C(),N()):"type"===t?(T(),i=Ri(o),l.selectAll(".type").data(i).enter().append("text").attr("class","type").attr("x",(function(t){return o[t]})).attr("y",40).attr("text-anchor","middle").text((function(t){return t})),A(),C(),y.force("x",fr().strength(h).x(b)),y.alpha(1).restart()):"source"==t?(T(),k(),e=Ri(s),l.selectAll(".source").data(e).enter().append("text").attr("class","source").attr("x",(function(t){return s[t]})).attr("y",40).attr("text-anchor","middle").text((function(t){return t})),C(),y.force("x",fr().strength(h).x(w)),y.alpha(1).restart()):"industry"==t?(T(),k(),A(),n=Ri(f),l.selectAll(".industry").data(n).enter().append("text").attr("class","industry").attr("x",(function(t){return f[t]})).attr("y",40).attr("text-anchor","middle").text((function(t){return t})),y.force("x",fr().strength(h).x(m)),y.alpha(1).restart()):(k(),A(),C(),M())}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,